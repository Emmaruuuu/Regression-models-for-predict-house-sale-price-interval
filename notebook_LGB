{"cells":[{"cell_type":"markdown","source":["IMPORT"],"metadata":{"id":"AFajagLkieEV"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"LPvqHBZKDQjm","executionInfo":{"status":"ok","timestamp":1754372595473,"user_tz":-420,"elapsed":38705,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e7492c57-b49b-40bc-a22a-52862d57ca18"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","from sklearn.model_selection import train_test_split, KFold\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from lightgbm import LGBMRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# === 0. Utility: log1p inverse ===\n","def inverse_log1p(arr):\n","    return np.expm1(arr)"],"metadata":{"id":"strjl2zYxQB4","executionInfo":{"status":"ok","timestamp":1754372595479,"user_tz":-420,"elapsed":17,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["LOAD DATA (read)"],"metadata":{"id":"VjHn_QtfigdF"}},{"cell_type":"code","execution_count":3,"metadata":{"id":"5gb6U7Gkj2p6","executionInfo":{"status":"ok","timestamp":1754372607913,"user_tz":-420,"elapsed":12445,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"outputs":[],"source":["url1 = 'https://drive.google.com/file/d/1zpNPZRiJ9FoyR_ZAjNhw0tgP2QrQCQ35/view?usp=drive_link'\n","url2 = 'https://drive.google.com/file/d/1zWvwzwBqsZITslf0KalorHR7XKciacUQ/view?usp=drive_link'\n","\n","# Mengambil ID file dari tautan\n","file1_id = url1.split('/')[-2]\n","file2_id = url2.split('/')[-2]\n","\n","# Membuat tautan langsung ke file CSV\n","download_url1 = 'https://drive.google.com/uc?id=' + file1_id\n","download_url2 = 'https://drive.google.com/uc?id=' + file2_id\n","\n","# Membaca file CSV dari tautan\n","df_train = pd.read_csv(download_url1)\n","df_test = pd.read_csv(download_url2)\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":617},"executionInfo":{"elapsed":188,"status":"ok","timestamp":1754372608106,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"XvAyVJWfkZOt","outputId":"9a665163-6a13-4492-bd18-177ce0492d95"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            id   sale_date  sale_price  sale_nbr sale_warning join_status  \\\n","0            0  2014-11-15      236000       2.0                    nochg   \n","1            1  1999-01-15      313300       NaN          26        nochg   \n","2            2  2006-08-15      341000       1.0                    nochg   \n","3            3  1999-12-15      267000       1.0                    nochg   \n","4            4  2018-07-15     1650000       2.0                   miss99   \n","...        ...         ...         ...       ...          ...         ...   \n","199995  199995  2000-08-15      277500       1.0                    nochg   \n","199996  199996  2019-07-15     1296000       2.0                      new   \n","199997  199997  2018-06-15      845000       2.0                      new   \n","199998  199998  2018-06-15      890000       2.0                    nochg   \n","199999  199999  2024-06-15      799000       NaN                      new   \n","\n","        join_year  latitude  longitude  area  ... view_olympics view_cascades  \\\n","0            2025   47.2917  -122.3658    53  ...             0             0   \n","1            2025   47.6531  -122.1996    74  ...             0             0   \n","2            2025   47.4733  -122.1901    30  ...             0             0   \n","3            2025   47.4739  -122.3295    96  ...             0             0   \n","4            2025   47.7516  -122.1222    36  ...             0             0   \n","...           ...       ...        ...   ...  ...           ...           ...   \n","199995       2025   47.5503  -122.0285    69  ...             0             0   \n","199996       2025   47.6789  -122.1164    72  ...             0             0   \n","199997       2025   47.6939  -122.3542     6  ...             0             0   \n","199998       2025   47.6433  -122.0613    35  ...             0             0   \n","199999       2025   47.5806  -122.3881    48  ...             0             0   \n","\n","       view_territorial  view_skyline  view_sound  view_lakewash  \\\n","0                     0             0           0              0   \n","1                     0             0           0              1   \n","2                     0             0           0              0   \n","3                     0             0           0              0   \n","4                     0             0           0              0   \n","...                 ...           ...         ...            ...   \n","199995                0             0           0              0   \n","199996                0             0           0              0   \n","199997                0             0           0              0   \n","199998                0             0           0              0   \n","199999                0             0           0              0   \n","\n","        view_lakesamm  view_otherwater  view_other  submarket  \n","0                   0                0           0          I  \n","1                   0                0           0          Q  \n","2                   0                0           0          K  \n","3                   0                0           0          G  \n","4                   0                0           0          P  \n","...               ...              ...         ...        ...  \n","199995              0                0           0          O  \n","199996              0                0           0          P  \n","199997              0                0           0          B  \n","199998              0                0           0          O  \n","199999              0                0           0          F  \n","\n","[200000 rows x 47 columns]"],"text/html":["\n","  <div id=\"df-2827fd72-b4d1-4dd3-8d22-d506d160f516\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>sale_date</th>\n","      <th>sale_price</th>\n","      <th>sale_nbr</th>\n","      <th>sale_warning</th>\n","      <th>join_status</th>\n","      <th>join_year</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>area</th>\n","      <th>...</th>\n","      <th>view_olympics</th>\n","      <th>view_cascades</th>\n","      <th>view_territorial</th>\n","      <th>view_skyline</th>\n","      <th>view_sound</th>\n","      <th>view_lakewash</th>\n","      <th>view_lakesamm</th>\n","      <th>view_otherwater</th>\n","      <th>view_other</th>\n","      <th>submarket</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2014-11-15</td>\n","      <td>236000</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.2917</td>\n","      <td>-122.3658</td>\n","      <td>53</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>I</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1999-01-15</td>\n","      <td>313300</td>\n","      <td>NaN</td>\n","      <td>26</td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.6531</td>\n","      <td>-122.1996</td>\n","      <td>74</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2006-08-15</td>\n","      <td>341000</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.4733</td>\n","      <td>-122.1901</td>\n","      <td>30</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>K</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>1999-12-15</td>\n","      <td>267000</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.4739</td>\n","      <td>-122.3295</td>\n","      <td>96</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>G</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2018-07-15</td>\n","      <td>1650000</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>miss99</td>\n","      <td>2025</td>\n","      <td>47.7516</td>\n","      <td>-122.1222</td>\n","      <td>36</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>199995</th>\n","      <td>199995</td>\n","      <td>2000-08-15</td>\n","      <td>277500</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.5503</td>\n","      <td>-122.0285</td>\n","      <td>69</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>199996</th>\n","      <td>199996</td>\n","      <td>2019-07-15</td>\n","      <td>1296000</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.6789</td>\n","      <td>-122.1164</td>\n","      <td>72</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>P</td>\n","    </tr>\n","    <tr>\n","      <th>199997</th>\n","      <td>199997</td>\n","      <td>2018-06-15</td>\n","      <td>845000</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.6939</td>\n","      <td>-122.3542</td>\n","      <td>6</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>199998</th>\n","      <td>199998</td>\n","      <td>2018-06-15</td>\n","      <td>890000</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.6433</td>\n","      <td>-122.0613</td>\n","      <td>35</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>199999</th>\n","      <td>199999</td>\n","      <td>2024-06-15</td>\n","      <td>799000</td>\n","      <td>NaN</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.5806</td>\n","      <td>-122.3881</td>\n","      <td>48</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>F</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200000 rows × 47 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2827fd72-b4d1-4dd3-8d22-d506d160f516')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2827fd72-b4d1-4dd3-8d22-d506d160f516 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2827fd72-b4d1-4dd3-8d22-d506d160f516');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-ff82ee6c-541d-4503-9084-b0e2f56705b7\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff82ee6c-541d-4503-9084-b0e2f56705b7')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-ff82ee6c-541d-4503-9084-b0e2f56705b7 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_1d0b9c30-2da2-4867-8660-7268d0a0b0f8\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1d0b9c30-2da2-4867-8660-7268d0a0b0f8 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_train"}},"metadata":{},"execution_count":4}],"source":["df_train"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":617},"executionInfo":{"elapsed":234,"status":"ok","timestamp":1754372608344,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"K7LwAkq-kbdB","outputId":"6770ebea-6f01-487b-d959-e76547abe1aa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            id   sale_date  sale_nbr sale_warning    join_status  join_year  \\\n","0       200000  2022-12-15       4.0                         new       2025   \n","1       200001  2000-10-15       2.0                         new       2025   \n","2       200002  2004-06-15       1.0                       nochg       2025   \n","3       200003  2009-11-15       1.0                       nochg       2025   \n","4       200004  1999-06-15       1.0               reno - before       1999   \n","...        ...         ...       ...          ...            ...        ...   \n","199995  399995  2004-03-15       2.0                       nochg       2025   \n","199996  399996  2006-09-15       3.0                      miss99       2025   \n","199997  399997  2021-06-15       4.0                       nochg       2025   \n","199998  399998  2012-04-15       2.0                         new       2025   \n","199999  399999  2004-07-15       1.0                         new       2025   \n","\n","        latitude  longitude  area         city  ... view_olympics  \\\n","0        47.4794  -122.2212    25       RENTON  ...             0   \n","1        47.5778  -122.0270    69    SAMMAMISH  ...             0   \n","2        47.5632  -122.1623    31     BELLEVUE  ...             3   \n","3        47.6911  -122.3469     6      SEATTLE  ...             0   \n","4        47.4001  -122.4146   100  KING COUNTY  ...             0   \n","...          ...        ...   ...          ...  ...           ...   \n","199995   47.5489  -122.2704    81      SEATTLE  ...             0   \n","199996   47.7093  -122.2116    37     KIRKLAND  ...             0   \n","199997   47.2666  -122.2442    87      PACIFIC  ...             0   \n","199998   47.5500  -121.9952    75     ISSAQUAH  ...             0   \n","199999   47.6059  -122.0207    35    SAMMAMISH  ...             0   \n","\n","       view_cascades  view_territorial  view_skyline  view_sound  \\\n","0                  0                 0             0           0   \n","1                  0                 0             0           0   \n","2                  0                 3             3           0   \n","3                  0                 0             0           0   \n","4                  2                 4             0           3   \n","...              ...               ...           ...         ...   \n","199995             0                 0             0           0   \n","199996             0                 0             0           0   \n","199997             0                 0             0           0   \n","199998             0                 0             0           0   \n","199999             0                 0             0           0   \n","\n","        view_lakewash  view_lakesamm  view_otherwater  view_other  submarket  \n","0                   0              0                0           0          J  \n","1                   0              0                0           0          O  \n","2                   2              0                0           0          R  \n","3                   0              0                0           0          B  \n","4                   0              0                0           0          H  \n","...               ...            ...              ...         ...        ...  \n","199995              0              0                0           0          E  \n","199996              0              0                0           0          Q  \n","199997              0              0                0           0          L  \n","199998              0              0                0           0          N  \n","199999              0              0                0           0          O  \n","\n","[200000 rows x 46 columns]"],"text/html":["\n","  <div id=\"df-e597b7e0-d2f1-4668-8a41-a0cff2ec465f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>sale_date</th>\n","      <th>sale_nbr</th>\n","      <th>sale_warning</th>\n","      <th>join_status</th>\n","      <th>join_year</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>area</th>\n","      <th>city</th>\n","      <th>...</th>\n","      <th>view_olympics</th>\n","      <th>view_cascades</th>\n","      <th>view_territorial</th>\n","      <th>view_skyline</th>\n","      <th>view_sound</th>\n","      <th>view_lakewash</th>\n","      <th>view_lakesamm</th>\n","      <th>view_otherwater</th>\n","      <th>view_other</th>\n","      <th>submarket</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>200000</td>\n","      <td>2022-12-15</td>\n","      <td>4.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.4794</td>\n","      <td>-122.2212</td>\n","      <td>25</td>\n","      <td>RENTON</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>J</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>200001</td>\n","      <td>2000-10-15</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.5778</td>\n","      <td>-122.0270</td>\n","      <td>69</td>\n","      <td>SAMMAMISH</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>O</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>200002</td>\n","      <td>2004-06-15</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.5632</td>\n","      <td>-122.1623</td>\n","      <td>31</td>\n","      <td>BELLEVUE</td>\n","      <td>...</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>R</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>200003</td>\n","      <td>2009-11-15</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.6911</td>\n","      <td>-122.3469</td>\n","      <td>6</td>\n","      <td>SEATTLE</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>B</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>200004</td>\n","      <td>1999-06-15</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>reno - before</td>\n","      <td>1999</td>\n","      <td>47.4001</td>\n","      <td>-122.4146</td>\n","      <td>100</td>\n","      <td>KING COUNTY</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>H</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>199995</th>\n","      <td>399995</td>\n","      <td>2004-03-15</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.5489</td>\n","      <td>-122.2704</td>\n","      <td>81</td>\n","      <td>SEATTLE</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>199996</th>\n","      <td>399996</td>\n","      <td>2006-09-15</td>\n","      <td>3.0</td>\n","      <td></td>\n","      <td>miss99</td>\n","      <td>2025</td>\n","      <td>47.7093</td>\n","      <td>-122.2116</td>\n","      <td>37</td>\n","      <td>KIRKLAND</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>199997</th>\n","      <td>399997</td>\n","      <td>2021-06-15</td>\n","      <td>4.0</td>\n","      <td></td>\n","      <td>nochg</td>\n","      <td>2025</td>\n","      <td>47.2666</td>\n","      <td>-122.2442</td>\n","      <td>87</td>\n","      <td>PACIFIC</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>L</td>\n","    </tr>\n","    <tr>\n","      <th>199998</th>\n","      <td>399998</td>\n","      <td>2012-04-15</td>\n","      <td>2.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.5500</td>\n","      <td>-121.9952</td>\n","      <td>75</td>\n","      <td>ISSAQUAH</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>199999</th>\n","      <td>399999</td>\n","      <td>2004-07-15</td>\n","      <td>1.0</td>\n","      <td></td>\n","      <td>new</td>\n","      <td>2025</td>\n","      <td>47.6059</td>\n","      <td>-122.0207</td>\n","      <td>35</td>\n","      <td>SAMMAMISH</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>O</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200000 rows × 46 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e597b7e0-d2f1-4668-8a41-a0cff2ec465f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e597b7e0-d2f1-4668-8a41-a0cff2ec465f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e597b7e0-d2f1-4668-8a41-a0cff2ec465f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0a5948a3-6f21-4ba3-a42e-1f935d6418f5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a5948a3-6f21-4ba3-a42e-1f935d6418f5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0a5948a3-6f21-4ba3-a42e-1f935d6418f5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_9dd2ac6d-e855-4a33-90d2-3f5b0b795bce\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_test')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9dd2ac6d-e855-4a33-90d2-3f5b0b795bce button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_test');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_test"}},"metadata":{},"execution_count":5}],"source":["df_test"]},{"cell_type":"markdown","source":["**PREPROCESSING DATA**\n","- Duplicate data\n","- missing value"],"metadata":{"id":"01oAKZ2vipi8"}},{"cell_type":"code","source":["print(df_train['sale_price'].dtypes)\n","print(df_train['sale_nbr'].dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8V5iSqpJYVUd","executionInfo":{"status":"ok","timestamp":1754372608388,"user_tz":-420,"elapsed":40,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"1ede8079-cc7d-4c5f-809c-d5b8fb671be0"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["int64\n","float64\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1754372608422,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"RjzuI0PWZFce","outputId":"9dab54b7-4e53-4343-b264-3efc5f37381d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train data : (200000, 47)\n"," Test data : (200000, 46)\n"]}],"source":["print(f\"Train data : {df_train.shape}\")\n","print(f\" Test data : {df_test.shape}\")"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":152,"status":"ok","timestamp":1754372608578,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"eLiJ_wBPQvDs","outputId":"d1827f4a-7805-46a1-997e-6190a60a617e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train data : 0\n"," Test data : 0\n"]}],"source":["# check for duplicate data\n","print(f\"Train data : {df_train.duplicated().sum()}\")\n","print(f\" Test data : {df_test.duplicated().sum()}\")"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":160,"status":"ok","timestamp":1754372608747,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"aDvAra2eZCh8","outputId":"bd337d97-a345-4c60-8ef7-c9705f8e8317"},"outputs":[{"output_type":"stream","name":"stdout","text":["Missing values in training data:\n"," id                      0\n","sale_date               0\n","sale_price              0\n","sale_nbr            42182\n","sale_warning            0\n","join_status             0\n","join_year               0\n","latitude                0\n","longitude               0\n","area                    0\n","city                    0\n","zoning                  0\n","subdivision         17550\n","present_use             0\n","land_val                0\n","imp_val                 0\n","year_built              0\n","year_reno               0\n","sqft_lot                0\n","sqft                    0\n","sqft_1                  0\n","sqft_fbsmt              0\n","grade                   0\n","fbsmt_grade             0\n","condition               0\n","stories                 0\n","beds                    0\n","bath_full               0\n","bath_3qtr               0\n","bath_half               0\n","garb_sqft               0\n","gara_sqft               0\n","wfnt                    0\n","golf                    0\n","greenbelt               0\n","noise_traffic           0\n","view_rainier            0\n","view_olympics           0\n","view_cascades           0\n","view_territorial        0\n","view_skyline            0\n","view_sound              0\n","view_lakewash           0\n","view_lakesamm           0\n","view_otherwater         0\n","view_other              0\n","submarket            1717\n","dtype: int64\n","\n","Missing values in test data:\n"," id                      0\n","sale_date               0\n","sale_nbr            42412\n","sale_warning            0\n","join_status             0\n","join_year               0\n","latitude                0\n","longitude               0\n","area                    0\n","city                    0\n","zoning                  0\n","subdivision         17550\n","present_use             0\n","land_val                0\n","imp_val                 0\n","year_built              0\n","year_reno               0\n","sqft_lot                0\n","sqft                    0\n","sqft_1                  0\n","sqft_fbsmt              0\n","grade                   0\n","fbsmt_grade             0\n","condition               0\n","stories                 0\n","beds                    0\n","bath_full               0\n","bath_3qtr               0\n","bath_half               0\n","garb_sqft               0\n","gara_sqft               0\n","wfnt                    0\n","golf                    0\n","greenbelt               0\n","noise_traffic           0\n","view_rainier            0\n","view_olympics           0\n","view_cascades           0\n","view_territorial        0\n","view_skyline            0\n","view_sound              0\n","view_lakewash           0\n","view_lakesamm           0\n","view_otherwater         0\n","view_other              0\n","submarket            1718\n","dtype: int64\n"]}],"source":["# Check for missing values\n","missing_values_train = df_train.isnull().sum()\n","print(\"Missing values in training data:\\n\", missing_values_train)\n","\n","missing_values_test = df_test.isnull().sum()\n","print(\"\\nMissing values in test data:\\n\", missing_values_test)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1754372609061,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"},"user_tz":-420},"id":"HI27D32l4nAf","outputId":"d2b5abe2-088f-4687-de1e-58f0e77e2eab"},"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-4033390944.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_train['sale_nbr'].fillna(df_train['sale_nbr'].median(numeric_only=True), inplace=True)\n","/tmp/ipython-input-4033390944.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_test['sale_nbr'].fillna(df_test['sale_nbr'].median(numeric_only=True), inplace=True)\n","/tmp/ipython-input-4033390944.py:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_train['subdivision'].fillna(df_train['subdivision'].mode().iloc[0], inplace=True)\n","/tmp/ipython-input-4033390944.py:7: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_test['subdivision'].fillna(df_test['subdivision'].mode().iloc[0], inplace=True)\n","/tmp/ipython-input-4033390944.py:10: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_train['submarket'].fillna(df_train['submarket'].mode().iloc[0], inplace=True)\n"]},{"output_type":"display_data","data":{"text/plain":["id                  0\n","sale_date           0\n","sale_price          0\n","sale_nbr            0\n","sale_warning        0\n","join_status         0\n","join_year           0\n","latitude            0\n","longitude           0\n","area                0\n","city                0\n","zoning              0\n","subdivision         0\n","present_use         0\n","land_val            0\n","imp_val             0\n","year_built          0\n","year_reno           0\n","sqft_lot            0\n","sqft                0\n","sqft_1              0\n","sqft_fbsmt          0\n","grade               0\n","fbsmt_grade         0\n","condition           0\n","stories             0\n","beds                0\n","bath_full           0\n","bath_3qtr           0\n","bath_half           0\n","garb_sqft           0\n","gara_sqft           0\n","wfnt                0\n","golf                0\n","greenbelt           0\n","noise_traffic       0\n","view_rainier        0\n","view_olympics       0\n","view_cascades       0\n","view_territorial    0\n","view_skyline        0\n","view_sound          0\n","view_lakewash       0\n","view_lakesamm       0\n","view_otherwater     0\n","view_other          0\n","submarket           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_date</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_price</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_nbr</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_warning</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>join_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>join_year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>latitude</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>longitude</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>area</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>zoning</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>subdivision</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>present_use</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>land_val</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>imp_val</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year_built</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year_reno</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_lot</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_fbsmt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>grade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fbsmt_grade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>condition</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stories</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>beds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_full</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_3qtr</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_half</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>garb_sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gara_sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>wfnt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>golf</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>greenbelt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>noise_traffic</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_rainier</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_olympics</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_cascades</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_territorial</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_skyline</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_sound</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_lakewash</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_lakesamm</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_otherwater</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_other</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>submarket</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Missing values in train data:\n"," None\n"]},{"output_type":"display_data","data":{"text/plain":["id                  0\n","sale_date           0\n","sale_nbr            0\n","sale_warning        0\n","join_status         0\n","join_year           0\n","latitude            0\n","longitude           0\n","area                0\n","city                0\n","zoning              0\n","subdivision         0\n","present_use         0\n","land_val            0\n","imp_val             0\n","year_built          0\n","year_reno           0\n","sqft_lot            0\n","sqft                0\n","sqft_1              0\n","sqft_fbsmt          0\n","grade               0\n","fbsmt_grade         0\n","condition           0\n","stories             0\n","beds                0\n","bath_full           0\n","bath_3qtr           0\n","bath_half           0\n","garb_sqft           0\n","gara_sqft           0\n","wfnt                0\n","golf                0\n","greenbelt           0\n","noise_traffic       0\n","view_rainier        0\n","view_olympics       0\n","view_cascades       0\n","view_territorial    0\n","view_skyline        0\n","view_sound          0\n","view_lakewash       0\n","view_lakesamm       0\n","view_otherwater     0\n","view_other          0\n","submarket           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_date</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_nbr</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sale_warning</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>join_status</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>join_year</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>latitude</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>longitude</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>area</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>zoning</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>subdivision</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>present_use</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>land_val</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>imp_val</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year_built</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>year_reno</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_lot</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_1</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>sqft_fbsmt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>grade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>fbsmt_grade</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>condition</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>stories</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>beds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_full</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_3qtr</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>bath_half</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>garb_sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>gara_sqft</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>wfnt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>golf</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>greenbelt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>noise_traffic</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_rainier</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_olympics</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_cascades</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_territorial</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_skyline</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_sound</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_lakewash</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_lakesamm</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_otherwater</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>view_other</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>submarket</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Missing values in test data:\n"," None\n"]}],"source":["# Fill missing values in 'sale_nbr' with the median (numerical column)\n","df_train['sale_nbr'].fillna(df_train['sale_nbr'].median(numeric_only=True), inplace=True)\n","df_test['sale_nbr'].fillna(df_test['sale_nbr'].median(numeric_only=True), inplace=True)\n","\n","# Fill missing values in 'subdivision' with the mode (categorical column)\n","df_train['subdivision'].fillna(df_train['subdivision'].mode().iloc[0], inplace=True)\n","df_test['subdivision'].fillna(df_test['subdivision'].mode().iloc[0], inplace=True)\n","\n","# Fill missing values in 'submarket' with the mode (categorical column)\n","df_train['submarket'].fillna(df_train['submarket'].mode().iloc[0], inplace=True)\n","df_test['submarket'].fillna(df_test['submarket'].mode().iloc[0], inplace=True)\n","\n","# Verify that missing values have been handled\n","print(\"\\nMissing values in train data:\\n\", display(df_train.isnull().sum()))\n","\n","print(\"\\nMissing values in test data:\\n\", display(df_test.isnull().sum()))"]},{"cell_type":"markdown","source":["**EDA :**\n","- cek skewness target\n","- feature engineering"],"metadata":{"id":"Ma77QAilT3u5"}},{"cell_type":"code","source":["# cek skewness target\n","print(f\"Train data : {df_train['sale_price'].skew()}\")\n","\n","plt.figure(figsize=(10, 6))\n","sns.histplot(df_train['sale_price'], kde=True, bins=50)\n","plt.title('Distribution of Transformed Sale Price (Train)')\n","plt.xlabel('Transformed Sale Price')\n","plt.ylabel('Frequency')\n","plt.show()\n","\n","print(f\"Train data (before log transform): {df_train['sale_price'].skew()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":548},"id":"A1H7dglQZm2I","executionInfo":{"status":"ok","timestamp":1754372610576,"user_tz":-420,"elapsed":1500,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"a0a3db96-5d6e-47ae-af9c-67d30e5523a6"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Train data : 2.092406373561314\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA2QAAAIjCAYAAABswtioAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAj6FJREFUeJzs3Xd0VHX+//HnnZnMJJPeQwgJvTdBRVSsCCLqWteGbXEtP3vdVXexrqy6tnV10a8FVFzbuu7aEAQEFUSlCgSkh5ZOep+5vz+SGYkJkIQkN5O8HufkJLn3c+99TyYD88qnXMM0TRMRERERERFpdzarCxAREREREemqFMhEREREREQsokAmIiIiIiJiEQUyERERERERiyiQiYiIiIiIWESBTERERERExCIKZCIiIiIiIhZRIBMREREREbGIApmIiIiIiIhFFMhEJCA8+OCDGIbRLtc66aSTOOmkk/zff/XVVxiGwQcffNAu17/qqqvo2bNnu1yrpUpKSrjmmmtISkrCMAxuu+02q0tqNTU1Ndxzzz306NEDm83GOeecY3VJraZnz55cddVV7X7dmTNnYhgG27dvb/drH0h7/pvya++99x4xMTGUlJS02zW3b9+OYRjMnDmz2cfm5eURGhrKZ5991vqFiYgCmYi0P9+bM99HcHAwycnJTJw4kb///e8UFxe3ynX27NnDgw8+yKpVq1rlfK2pI9fWFI899hgzZ87khhtu4M033+Tyyy9v0Mb3hvdQH/uH347gtdde48knn+SCCy5g1qxZ3H777VaX1O5KSkp44IEHGDp0KKGhocTGxjJy5EhuvfVW9uzZY3V5/j+S+D6CgoLo3bs3V1xxBVu3brW6vIPyeDw88MAD3HzzzYSFhQXE6yQ2NpZrrrmGP//5z5bVINKZOawuQES6rocffphevXpRXV1NZmYmX331FbfddhtPP/00//vf/xg+fLi/7Z/+9Cf++Mc/Nuv8e/bs4aGHHqJnz56MHDmyycfNnTu3WddpiYPV9n//9394vd42r+FwLFiwgGOOOYYHHnjggG3OO+88+vbt6/++pKSEG264gXPPPZfzzjvPvz0xMbFNa22uBQsW0L17d5555hmrS7FEdXU1J5xwAhs2bODKK6/k5ptvpqSkhHXr1vH2229z7rnnkpycbHWZANxyyy0cddRRVFdXs2LFCl5++WU+/fRTfvrpp0PW2JJ/U1rDxx9/zMaNG7n22muB9nudpKWlUV5eTlBQUIuOv/766/n73//OggULOOWUUw6rFhGpT4FMRCwzadIkjjzySP/39957LwsWLODMM8/k7LPPJj09nZCQEAAcDgcOR9v+k1VWVobb7cbpdLbpdQ6lpW+Y2lN2djaDBw8+aJvhw4fXC9W5ubnccMMNDB8+nClTphzwuIqKCpxOJzabNYM4srOziYqKarXzeb1eqqqqCA4ObrVztqWPPvqIlStXMnv2bC699NJ6+yoqKqiqqrKosobGjRvHBRdcAMDVV19N//79ueWWW5g1axb33ntvo8eUlpYSGhraLv+mNOb111/nuOOOo3v37kD7vU58oxFaatCgQQwdOpSZM2cqkIm0Mg1ZFJEO5ZRTTuHPf/4zO3bs4K233vJvb2y+x7x58zj++OOJiooiLCyMAQMGcN999wG1Q5qOOuoooPaNmm/Yj2/+xEknncTQoUNZvnw5J5xwAm6323/sr+eQ+Xg8Hu677z6SkpIIDQ3l7LPPZufOnfXaHGiOzv7nPFRtjc0hKy0t5c4776RHjx64XC4GDBjA3/72N0zTrNfOMAxuuukmPvroI4YOHYrL5WLIkCHMmTOn8R/4r2RnZzN16lQSExMJDg5mxIgRzJo1y7/fN1Rs27ZtfPrpp/7aWzo3yHe+d955hz/96U90794dt9tNUVER+fn53HXXXQwbNoywsDAiIiKYNGkSq1evbvQc7733Hn/5y19ISUkhODiYU089lc2bN9dru2nTJs4//3ySkpIIDg4mJSWFiy++mMLCQv8cm4ULF7Ju3Tr/Y/vqq6+A5j8Hs2fPZsiQIbhcLubMmeMfqvvNN99wyy23EB8fT1RUFNdddx1VVVUUFBRwxRVXEB0dTXR0NPfcc0+Dc3u9Xp599lmGDBlCcHAwiYmJXHfddezbt69eO9M0efTRR0lJScHtdnPyySezbt26Jj0nW7ZsAeC4445rsC84OJiIiAj/92vWrOGqq66id+/eBAcHk5SUxO9+9zvy8vKadK3PP/+ccePGERoaSnh4OJMnT25ynY3xBYVt27YBv/y7sX79ei699FKio6M5/vjj6+37tbfeeoujjz4at9tNdHQ0J5xwQoNe85bWXVFRwZw5cxg/fnyzHldrvE4am0N21VVXERYWxu7duznnnHMICwsjPj6eu+66C4/H06CO0047jY8//rjB76WIHB71kIlIh3P55Zdz3333MXfuXH7/+9832mbdunWceeaZDB8+nIcffhiXy8XmzZv59ttvgdq/5j788MNMmzaNa6+9lnHjxgFw7LHH+s+Rl5fHpEmTuPjii5kyZcohhwT95S9/wTAM/vCHP5Cdnc2zzz7L+PHjWbVqlb8nrymaUtv+TNPk7LPPZuHChUydOpWRI0fyxRdfcPfdd7N79+4GQ+u++eYbPvzwQ/7f//t/hIeH8/e//53zzz+fjIwMYmNjD1hXeXk5J510Eps3b+amm26iV69evP/++1x11VUUFBRw6623MmjQIN58801uv/12UlJSuPPOOwGIj49v8uNvzCOPPILT6eSuu+6isrISp9PJ+vXr+eijj7jwwgvp1asXWVlZvPTSS5x44omsX7++wZC0v/71r9hsNu666y4KCwt54oknuOyyy1i2bBkAVVVVTJw4kcrKSm6++WaSkpLYvXs3n3zyCQUFBcTHx/Pmm2/yl7/8hZKSEqZPnw7UPl/NfQ4WLFjAe++9x0033URcXBw9e/b0zxf0Xfuhhx7iu+++4+WXXyYqKoolS5aQmprKY489xmeffcaTTz7J0KFDueKKK/znve6665g5cyZXX301t9xyC9u2beMf//gHK1eu5Ntvv/X3rk6bNo1HH32UM844gzPOOIMVK1YwYcKEJvVupaWlAfDGG2/wpz/96aALX8ybN4+tW7dy9dVXk5SUxLp163j55ZdZt24d33333UGPffPNN7nyyiuZOHEijz/+OGVlZfzzn//k+OOPZ+XKlS1a2MYXJn/9e37hhRfSr18/HnvssYOGiYceeogHH3yQY489locffhin08myZctYsGABEyZMOOy6ly9fTlVVFaNGjWr2Y4PWeZ38msfjYeLEiYwZM4a//e1vfPnllzz11FP06dOHG264oV7b0aNH88wzz7Bu3TqGDh3aoscgIo0wRUTa2euvv24C5g8//HDANpGRkeYRRxzh//6BBx4w9/8n65lnnjEBMycn54Dn+OGHH0zAfP311xvsO/HEE03AnDFjRqP7TjzxRP/3CxcuNAGze/fuZlFRkX/7e++9ZwLmc88959+WlpZmXnnllYc858Fqu/LKK820tDT/9x999JEJmI8++mi9dhdccIFpGIa5efNm/zbAdDqd9batXr3aBMznn3++wbX29+yzz5qA+dZbb/m3VVVVmWPHjjXDwsLqPfa0tDRz8uTJBz3fr+Xk5JiA+cADD/i3+X62vXv3NsvKyuq1r6ioMD0eT71t27ZtM10ul/nwww83OMegQYPMyspK//bnnnvOBMyffvrJNE3TXLlypQmY77///kHrPPHEE80hQ4bU29bc58Bms5nr1q2r19b3ez9x4kTT6/X6t48dO9Y0DMO8/vrr/dtqamrMlJSUer8zX3/9tQmYs2fPrnfeOXPm1NuenZ1tOp1Oc/LkyfWuc99995lAo7+f+ysrKzMHDBhgAmZaWpp51VVXma+++qqZlZXVaNtf+9e//mUC5uLFixs89m3btpmmaZrFxcVmVFSU+fvf/77esZmZmWZkZGSD7b/me85fe+01Mycnx9yzZ4/56aefmj179jQNw/D/2+L7d+OSSy5pcI5f/5uyadMm02azmeeee26D3zvfz/Fw637llVfq/U42pq1eJ9u2bWvwb86VV15pAvXamaZpHnHEEebo0aMb1LZkyRITMN99992DPk4RaR4NWRSRDiksLOygqy365vj897//bfECGC6Xi6uvvrrJ7a+44grCw8P9319wwQV069atzZeC/uyzz7Db7dxyyy31tt95552Ypsnnn39eb/v48ePp06eP//vhw4cTERFxyNXnPvvsM5KSkrjkkkv824KCgrjlllsoKSlh0aJFrfBoGnfllVc26GV0uVz++TEej4e8vDz/0NQVK1Y0OMfVV19db/6fr+fR97gjIyMB+OKLLygrK2tWfc19Dk488cQDzrGbOnVqvZ6jMWPGYJomU6dO9W+z2+0ceeSR9Z6z999/n8jISE477TRyc3P9H6NHjyYsLIyFCxcC8OWXX1JVVcXNN99c7zpNvTVBSEgIy5Yt4+677wZqV0WdOnUq3bp14+abb6aysrJeW5+Kigpyc3M55phjABp9jnzmzZtHQUEBl1xySb3HYrfbGTNmjP+xHMrvfvc74uPjSU5OZvLkyZSWljJr1qx6c1OhdkGKQ/noo4/wer1Mmzatwbws38/xcOv2DeWMjo5u0uP7tdZ4nTTm1z+fcePGNfrvha/u3NzclpQvIgegIYsi0iGVlJSQkJBwwP0XXXQRr7zyCtdccw1//OMfOfXUUznvvPO44IILmjzJvXv37s1awKNfv371vjcMg759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zcSJE3nqqad4+umnue222zjyyCP55JNP/Pfr8mlObTabjf/9739MmzaNd999l9dff52ePXvy5JNPNjjv4QgJCeGrr77ij3/8I7NmzaKoqIgBAwbw+uuvN3qz67Z23333UVpayttvv827777LqFGj+PTTT/njH//YovONGDGCiRMn8vHHH7N7927cbjcjRozg888/968MeCDt9RwcyowZMxg9ejQvvfQS9913Hw6Hg549ezJlypR6N3J+9NFHCQ4OZsaMGSxcuJAxY8Ywd+5cJk+efMhrnH/++RQXFzN37lwWLFhAfn4+0dHRHH300dx5552cfPLJ/rZvv/02N998My+88AKmaTJhwgQ+//zzQ977CuDSSy8lOTmZv/71rzz55JNUVlbSvXt3xo0b16zVT1vTww8/TK9evXj++ee5//77cbvdDB8+nMsvv7zV6v7d737H+eefz86dOxss5NISrf06OZANGzawdu3aJve0ikjTGWZHnuUtIiIi0ol4PB4GDx7Mb3/720aHn3ZUt912G4sXL2b58uXqIRNpZQpkIiIiIu3o3Xff5YYbbiAjI4OwsDCryzmkvLw80tLSeO+99zjjjDOsLkek01EgExERERERsYhWWRQREREREbGIApmIiIiIiIhFFMhEREREREQsokAmIiIiIiJiEd2HrJV4vV727NlDeHi4loMVEREREenCTNOkuLiY5ORkbLaD94EpkLWSPXv2tMoNHkVEREREpHPYuXMnKSkpB22jQNZKwsPDgdofekREhMXViIiIiIiIVYqKiujRo4c/IxyMAlkr8Q1TjIiIUCATEREREZEmTWXSoh4iIiIiIiIWUSATERERERGxiAKZiIiIiIiIRRTIRERERERELKJAJiIiIiIiYhEFMhEREREREYsokImIiIiIiFhEgUxERERERMQiCmQiIiIiIiIWUSATERERERGxiAKZiIiIiIiIRRTIRERERERELKJAJiIiIiIiYhEFMhEREREREYsokImIiIiIiFhEgUxERERERMQiCmQiIiIiIiIWUSATERERERGxiMPqAkQyMjLIzc1t9nGVlZW4XK5mHxcXF0dqamqzjxMRERERaW0KZGKpjIwMBg4aRHlZWQuONgCz2UeFuN1sSE9XKBMRERERyymQiaVyc3MpLyvjsj88SWJqnyYfl/79Ij6f9RyTr7ufAcNHN/m4rIwtzH78bnJzcxXIRERERMRyCmTSISSm9iGl35Amt8/K2IItJAJvwgA2e+MpKKtmYLdwBiZFtGGVIiIiIiKtS4FMAo7Xa5JOd3rc8jbrq4BdhQDsyC9jT0EFJ/SPw2HTejUiIiIi0vHpXasEnJU7C8ijtifMbVQzPCWSkT2iAPhpdyEfLN9FUUW1hRWKiIiIiDSNApkElIKyKpZuzQMg7/PnOCokh5MHJHBi/3jOHpGMy2Ejq6iSd77fSWlljcXVioiIiIgcnAKZBAzTNJmfno3HaxJJKSVr5tXb3ysulEuPTiUm1El5tYevNzV/KX0RERERkfakQCYBY92eInYVlOOwGfRjb6NtIkKCmDA4EQPYmFVMRn5LltMXEREREWkfCmQSEEoqa/h6c22P19g+sQRz4DliiRHBDE+JBOCrjdnUeL3tUqOIiIiISHMpkElAWL5jH1U1XhIjXP4FPA5mbO9Y3E47+8qqWbGjoM3rExERERFpCQUy6fBM02RzdgkAR/eMwWYYhzzGFWRnXL84AL7fnk9huVZdFBEREZGOR4FMOryc4kpKKmsIshukxribfNyAxHBSokPweE2WbNYCHyIiIiLS8SiQSYe3JacUgLSYUBz2pv/KGobBCf3iAdiUU0Kx7k0mIiIiIh2MApl0eFtya4cr9okPbfax8eEuukeFYJqwdndRa5cmIiIiInJYFMikQysoqyKvpArDgJ5xzQ9kACPqVlz8aXchHrM1qxMREREROTwKZNKhbc2tHa6YEhVCcJC9RefoEx9GmMtBebWHXWX6lRcRERGRjkPvTqVD25JTO1yxd3xYi89hsxkMq+sl21KsX3kRERER6Tj07lQ6rLKqGvYWVADQuwXzx/Y3NDkCu2Gwr8qGs1v/1ihPREREROSwKZBJh7UttxQTSAh3EREcdFjncjsd9E+s7WULH3VmK1QnIiIiInL4FMikw9pat9z94faO+YzoEQVA6KBxFFR4WuWcIiIiIiKHQ4FMOqRqj5cd+WVA7aIcrSExIphopxfDHsSSnRWtck4RERERkcOhQCYdUk5xJR6vidtpJzbU2Wrn7eH2AvDNzvJWO6eIiIiISEspkEmHlFNcCdTOHzMMo9XOm+L2YppeNuRWs6dAoUxERERErKVAJh1Stj+QBbfqeUMcULlzHQCfrtnbqucWEREREWkuBTLpkHJKagNZfLir1c9dmr4YgI/X7Gn1c4uIiIiINIcCmXQ4Hq9JXskvQxZbW9nPS7AZsGZXIdtzS1v9/CIiIiIiTaVAJh1OXmklXhNcDhvhwY5WP7+3rJBhCbULhXz6k4YtioiIiIh1FMikw/Et6BHfygt67O/4HiEAfLxawxZFRERExDqWBrLp06dz1FFHER4eTkJCAueccw4bN26s16aiooIbb7yR2NhYwsLCOP/888nKyqrXJiMjg8mTJ+N2u0lISODuu++mpqamXpuvvvqKUaNG4XK56Nu3LzNnzmxQzwsvvEDPnj0JDg5mzJgxfP/9963+mOXQsovbbriiz5iUYILsBhsyi/k5q7jNriMiIiIicjCWBrJFixZx44038t133zFv3jyqq6uZMGECpaW/zOu5/fbb+fjjj3n//fdZtGgRe/bs4bzzzvPv93g8TJ48maqqKpYsWcKsWbOYOXMm06ZN87fZtm0bkydP5uSTT2bVqlXcdtttXHPNNXzxxRf+Nu+++y533HEHDzzwACtWrGDEiBFMnDiR7Ozs9vlhiN/+PWRtJcxp44R+8QB8ol4yEREREbGIpYFszpw5XHXVVQwZMoQRI0Ywc+ZMMjIyWL58OQCFhYW8+uqrPP3005xyyimMHj2a119/nSVLlvDdd98BMHfuXNavX89bb73FyJEjmTRpEo888ggvvPACVVVVAMyYMYNevXrx1FNPMWjQIG666SYuuOACnnnmGX8tTz/9NL///e+5+uqrGTx4MDNmzMDtdvPaa681WntlZSVFRUX1PuTweU1zv3uQte6S97921ohkAD5bm9mm1xEREREROZAONYessLAQgJiYGACWL19OdXU148eP97cZOHAgqampLF26FIClS5cybNgwEhMT/W0mTpxIUVER69at87fZ/xy+Nr5zVFVVsXz58nptbDYb48eP97f5tenTpxMZGen/6NGjx+E+fAEKyqqp8Zo4bAZR7qA2vdbJAxOw2ww2Z5ewI0+rLYqIiIhI++swgczr9XLbbbdx3HHHMXToUAAyMzNxOp1ERUXVa5uYmEhmZqa/zf5hzLfft+9gbYqKiigvLyc3NxePx9NoG985fu3ee++lsLDQ/7Fz586WPXCpJ7u4AqgdrmhrowU9fCJDgjiqZzQA89M1NFVERERE2l+HCWQ33ngja9eu5Z133rG6lCZxuVxERETU+5DD1x7zx/Y3flBtCJ+/IesQLUVEREREWl+HCGQ33XQTn3zyCQsXLiQlJcW/PSkpiaqqKgoKCuq1z8rKIikpyd/m16su+r4/VJuIiAhCQkKIi4vDbrc32sZ3Dmkf7R3ITq0LZMu25lNUUd0u1xQRERER8bE0kJmmyU033cR//vMfFixYQK9evertHz16NEFBQcyfP9+/bePGjWRkZDB27FgAxo4dy08//VRvNcR58+YRERHB4MGD/W32P4evje8cTqeT0aNH12vj9XqZP3++v420PdM0f1nyPqx9AlmvuFB6x4dS4zX5+ufcdrmmiIiIiIiPpYHsxhtv5K233uLtt98mPDyczMxMMjMzKS8vByAyMpKpU6dyxx13sHDhQpYvX87VV1/N2LFjOeaYYwCYMGECgwcP5vLLL2f16tV88cUX/OlPf+LGG2/E5ap9U3/99dezdetW7rnnHjZs2MCLL77Ie++9x+233+6v5Y477uD//u//mDVrFunp6dxwww2UlpZy9dVXt/8PposqrqihssaLzYCYMGe7Xdc/bDFdwxZFREREpH05rLz4P//5TwBOOumkettff/11rrrqKgCeeeYZbDYb559/PpWVlUycOJEXX3zR39Zut/PJJ59www03MHbsWEJDQ7nyyit5+OGH/W169erFp59+yu23385zzz1HSkoKr7zyChMnTvS3ueiii8jJyWHatGlkZmYycuRI5syZ02ChD2k7vt6x2FAXDlv7/a3g1IEJvLx4Kws3ZuPxmthtbbuYiIiIiIiIj6WBzDTNQ7YJDg7mhRde4IUXXjhgm7S0ND777LODnuekk05i5cqVB21z0003cdNNNx2yJmkb7Tl/LD093f+1zWsS5jTYV1bNO/OWMSi+8d65uLg4UlNT27w2EREREek6LA1kIvvLK237QFaUnwPAlClT6m2PO/MuQoecxE3TZ1CwaFajx4a43WxIT1coExEREZFWo0AmHUZhee0qh1EhbXdD6PKSIgAmX3c/A4aP9m/fWWrj+zxIGXc+v/vtbxocl5WxhdmP301ubq4CmYiIiIi0GgUy6RBM85dAFuluu0DmE5ucRkq/If7v46s9/Pj1VoqrbYSn9CeyDUOhiIiIiIhPh7gPmUilF6o9JgYQEdz+YcgVZCc5MgSA7bml7X59EREREemaFMikQyipqV3ZMCzYYdkqh6mx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Wk92drYJmIsWLTpgG/2/G7ia8vzq/93AFR0dbb7yyiuN7guk1616yCxWVVXF8uXLGT9+vH+bzWZj/PjxLF26tNFjli5dWq89wMSJEw/YXqzTkucXoKSkhLS0NHr06HHQv/5IYNFrt/MbOXIk3bp147TTTuPbb7+1uhxpgsLCQgBiYmIO2Eav3cDVlOcX9P9uoPF4PLzzzjuUlpYyduzYRtsE0utWgcxiubm5eDweEhMT621PTEw84NyDzMzMZrUX67Tk+R0wYACvvfYa//3vf3nrrbfwer0ce+yx7Nq1qz1KljZ0oNduUVER5eXlFlUlraFbt27MmDGDf//73/z73/+mR48enHTSSaxYscLq0uQgvF4vt912G8cddxxDhw49YDv9vxuYmvr86v/dwPHTTz8RFhaGy+Xi+uuv5z//+Q+DBw9utG0gvW4dVhcgIvWNHTu23l97jj32WAYNGsRLL73EI488YmFlInIgAwYMYMCAAf7vjz32WLZs2cIzzzzDm2++aWFlcjA33ngja9eu5ZtvvrG6FGkDTX1+9f9u4BgwYACrVq2isLCQDz74gCuvvJJFixYdMJQFCvWQWSwuLg673U5WVla97VlZWSQlJTV6TFJSUrPai3Va8vz+WlBQEEcccQSbN29uixKlHR3otRsREUFISIhFVUlbOfroo/W67cBuuukmPvnkExYuXEhKSspB2+r/3cDTnOf31/T/bsfldDrp27cvo0ePZvr06YwYMYLnnnuu0baB9LpVILOY0+lk9OjRzJ8/37/N6/Uyf/78A46JHTt2bL32APPmzTtge7FOS57fX/N4PPz0009069atrcqUdqLXbteyatUqvW47INM0uemmm/jPf/7DggUL6NWr1yGP0Ws3cLTk+f01/b8bOLxeL5WVlY3uC6jXrdWriohpvvPOO6bL5TJnzpxprl+/3rz22mvNqKgoMzMz0zRN07z88svNP/7xj/723377relwOMy//e1vZnp6uvnAAw+YQUFB5k8//WTVQ5CDaO7z+9BDD5lffPGFuWXLFnP58uXmxRdfbAYHB5vr1q2z6iHIARQXF5srV640V65caQLm008/ba5cudLcsWOHaZqm+cc//tG8/PLL/e23bt1qut3u/9/evcdEcbVhAH8WcFll8UK1XCwXEVFRQFDQ2gqoi6KCpEohrS0QqmlADba1XtKq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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Train data (before log transform): 2.092406373561314\n"]}]},{"cell_type":"code","source":["# FEATURE ENGINEERING\n","# Create a new feature: years since renovation or built\n","df_train['years_since_reno'] = df_train.apply(lambda row: row['year_reno'] - row['year_built'] if row['year_reno'] != 0 else 2024 - row['year_built'], axis=1)\n","df_test['years_since_reno'] = df_test.apply(lambda row: row['year_reno'] - row['year_built'] if row['year_reno'] != 0 else 2024 - row['year_built'], axis=1)\n","\n","# Create a new feature: total number of bathrooms\n","df_train['total_bathrooms'] = df_train['bath_full'] + df_train['bath_3qtr'] + df_train['bath_half']\n","df_test['total_bathrooms'] = df_test['bath_full'] + df_test['bath_3qtr'] + df_test['bath_half']\n"],"metadata":{"id":"7w3fqubqg0aK","executionInfo":{"status":"ok","timestamp":1754372613763,"user_tz":-420,"elapsed":3176,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["SPLIT DATA"],"metadata":{"id":"0Ge21TxRTkHq"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# Define features (X) and target (y)\n","X = df_train.drop('sale_price', axis=1)\n","y = df_train['sale_price']\n","\n","# Split the data into training and validation sets\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=42)\n","\n","print(\"X_train shape:\", X_train.shape)\n","print(\"X_val shape:\", X_val.shape)\n","print(\"y_train shape:\", y_train.shape)\n","print(\"y_val shape:\", y_val.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MoVrhrTjN2Lu","executionInfo":{"status":"ok","timestamp":1754372613887,"user_tz":-420,"elapsed":119,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"1e85a5be-4020-4298-80b8-43e8a6530ba9"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape: (170000, 48)\n","X_val shape: (30000, 48)\n","y_train shape: (170000,)\n","y_val shape: (30000,)\n"]}]},{"cell_type":"markdown","source":["LANJUT PREPROCESSING\n","- LOG TRANSFORM\n","- Encoding\n","- Scalling"],"metadata":{"id":"6HImnpz3UKDk"}},{"cell_type":"code","source":["# cek skewness target\n","print(f\"y train : {y_train.skew()}\")\n","print(f\"y val : {y_val.skew()}\")\n","\n","plt.figure(figsize=(8, 5))\n","sns.histplot(y_train, kde=True, bins=50)\n","plt.title('Distribution of Transformed Sale Price (y train))')\n","plt.xlabel('Transformed Sale Price')\n","plt.ylabel('Frequency')\n","plt.show()\n","\n","plt.figure(figsize=(8, 5))\n","sns.histplot(y_val, kde=True, bins=50)\n","plt.title('Distribution of Transformed Sale Price (y val))')\n","plt.xlabel('Transformed Sale Price')\n","plt.ylabel('Frequency')\n","plt.show()\n","\n","print(f\"y train (before log transform): {y_train.skew()}\")\n","print(f\"y val (before log transform): {y_val.skew()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"9LNIV5QBhg49","executionInfo":{"status":"ok","timestamp":1754372615922,"user_tz":-420,"elapsed":2027,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"f348dfea-aa93-46d1-fe21-7c5ba44724d5"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["y train : 2.0903923439032117\n","y val : 2.103845192152696\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"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IcSPP/4oJEkSZ8+eLXP7jBkzBADxzjvv3HBf13viiScEANGvX78yt//yyy+iffv2Qq1Wi9jYWPHuu++KL774otRrU9bn1cqVKwUAceLEiVL77dq1q3jyySerHC95PkkIN777hIiIiOqExWJBfHw8Hn744TLLWebMmYNx48YhJSWlzBFdXOX++++HJEn46aefnNbv3bsXnTp1wt9//11u7TQ1XEyAiYiICIBtjN5Ro0bh7Nmz0Ol0jvVCCHTo0AFBQUFVujmtth05cgTt2rXD3r17nWaqA4BHH30UVqsVS5cudVF05M6YABMREVGZCgoK8Msvv2DDhg3473//i59//pkjKpBHYAJMREREZUpJSUFcXBz8/f3xz3/+E2+//barQyKqEUyAiYiIiKhB4TjARERERNSgMAEmIiIiogaFE2FUgtVqxcWLF+Hj41PjU9gSERER0c0TQiAvLw+RkZGQySru42UCXAkXL15EdHS0q8MgIiIiohs4d+4coqKiKmzj0gR43rx5mDdvHlJSUgAAbdq0waRJkxxz1/fq1QubNm1yes5zzz2H+fPnOx6fPXsWo0aNwoYNG6DT6TBs2DBMnz4dCsXVU9u4cSPGjx+PQ4cOITo6GhMnTsTw4cMrHad9mtVz587B19e3mmdLRERERLXFYDAgOjrakbdVxKUJcFRUFP7zn/+gefPmEEJg8eLFuO+++7Bnzx60adMGAPDMM884zUuu1WodP1ssFiQlJSE8PBxbt25FWloahg4dCi8vL7zzzjsAgDNnziApKQnPP/88lixZgnXr1uHpp59GREQEEhMTKxWnvezB19eXCTARERGRG6tMuarbDYMWGBiI9957DyNHjkSvXr3QsWNHfPDBB2W2XblyJe6++25cvHgRYWFhAID58+fjtddeQ1ZWFpRKJV577TWsWLECBw8edDzv0UcfRW5uLlatWlWpmAwGA/z8/KDX65kAExEREbmhquRrbjMKhMViwbfffouCggIkJCQ41i9ZsgTBwcFo27YtJkyYgMLCQse2bdu2oV27do7kFwASExNhMBhw6NAhR5t+/fo5HSsxMRHbtm0rNxaj0QiDweC0EBEREZFncPlNcAcOHEBCQgKKi4uh0+nw008/IT4+HgDw+OOPIyYmBpGRkdi/fz9ee+01HDt2DD/++CMAID093Sn5BeB4nJ6eXmEbg8GAoqIiaDSaUjFNnz4dU6ZMqfFzJSIiIiLXc3kC3LJlS+zduxd6vR7ff/89hg0bhk2bNiE+Ph7PPvuso127du0QERGBvn374tSpU2jatGmtxTRhwgSMHz/e8dheVE1ERERE9Z/LSyCUSiWaNWuGzp07Y/r06ejQoQPmzJlTZtuuXbsCAE6ePAkACA8PR0ZGhlMb++Pw8PAK2/j6+pbZ+wsAKpXKccMbb3wjIiIi8iwuT4CvZ7VaYTQay9y2d+9eAEBERAQAICEhAQcOHEBmZqajTXJyMnx9fR1lFAkJCVi3bp3TfpKTk53qjImIiIio4XBpCcSECRMwcOBANG7cGHl5efjmm2+wceNGrF69GqdOncI333yDQYMGISgoCPv378e4cePQo0cPtG/fHgDQv39/xMfHY8iQIZgxYwbS09MxceJEjB49GiqVCgDw/PPP4+OPP8arr76Kp556CuvXr8fSpUuxYsUKV546EREREbmISxPgzMxMDB06FGlpafDz80P79u2xevVq3HXXXTh37hzWrl2LDz74AAUFBYiOjsbgwYMxceJEx/Plcjl+++03jBo1CgkJCfD29sawYcOcxg2Oi4vDihUrMG7cOMyZMwdRUVFYsGBBpccAJiIiIiLP4nbjALsjjgNMRERE5N7q5TjARERERER1gQkwERERETUoTICJiIiIqEFhAkxEREREDQoTYCIiIiJqUFw+FTJ5lqKionInMrmeSqUqdzY+IiIiotrCBJhqTFFREWJiY5F1zcx8FQkJDUVqSgqTYCIiIqpTTICpxhiNRmRlZmLiV+uh8fapsG1RQR7eGtIHRqORCTARERHVKSbAVOM03j7Q6DhhCBEREbkn3gRHRERERA0KE2AiIiIialCYABMRERFRg8IEmIiIiIgaFCbARERERNSgMAEmIiIiogaFCTARERERNShMgImIiIioQWECTEREREQNChNgIiIiImpQOBUyVaioqAhGo7FSbfV6fS1HQ0RERHTzmABTuYqKihATG4uszMwqPc9sNtVSREREREQ3jwkwlctoNCIrMxMTv1oPjbfPDdvnZKbh/efvhdlsqYPoiIiIiKqHCTDdkMbbBxqd7w3bFRXk1UE0RERERDeHN8ERERERUYPCBJiIiIiIGhQmwERERETUoDABJiIiIqIGhQkwERERETUoTICJiIiIqEFhAkxEREREDQoTYCIiIiJqUJgAExEREVGDwgSYapwQAhdyilBYYnZ1KERERESlcCpkqlHqmA5YcSIf2UUGeMkl3BYXiI7R/lDI+F2LiIiI3AOzEqoRFqvAhlQjwh59G9lFVkgATBaBLScv4+vtZ5FpKHZ1iEREREQAmABTDTl4QY/zeRYIiwmtgpUYeWcc7ooPg1Yph77IhBUH0lBitro6TCIiIiImwHTzSsxW7DiTDQDIXvsZbmukgbdKgfgIXwy5PQY+agUMxWb8cTLLxZESERERMQGmGvD32RwUmSzwUUrI37/GaZvaS467WocBAA5eMCD1coErQiQiIiJyYAJMN6XAaMbfZ3MAALeEeQFWS6k20YFadIjyAwCsPZIJo6l0GyIiIqK6wgSYbspfKdkwWQTCfFVo7Csvt123ZsHw03gh32jGrtScOoyQiIiIyBkTYKq2ErMVhy4YAADdmgZDkqRy23rJZbizWTAAYP8FPUosvCGOiIiIXIMJMFVbanYBLELAT+OFqADNDds3DfFGgNYLJWYrjmYW1UGERERERKUxAaZqO3PJdkNbk2DvCnt/7SRJQqeYAADAgbRCQMZ5WIiIiKjuuTQBnjdvHtq3bw9fX1/4+voiISEBK1eudGwvLi7G6NGjERQUBJ1Oh8GDByMjI8NpH2fPnkVSUhK0Wi1CQ0PxyiuvwGx2noJ348aN6NSpE1QqFZo1a4ZFixbVxel5NKsQSLlUCACIC/au9PNahftAq5SjwGSFd3zP2gqPiIiIqFwuTYCjoqLwn//8B7t378auXbvQp08f3HfffTh06BAAYNy4cfj111+xbNkybNq0CRcvXsSDDz7oeL7FYkFSUhJKSkqwdetWLF68GIsWLcKkSZMcbc6cOYOkpCT07t0be/fuxdixY/H0009j9erVdX6+niTDUIwikwVKhQyR/jcuf7BTyGS4JdofAODb9UFYhailCImIiIjK5tK/Qd9zzz1Oj99++23MmzcP27dvR1RUFD7//HN888036NOnDwBg4cKFaN26NbZv347bb78da9asweHDh7F27VqEhYWhY8eOmDZtGl577TVMnjwZSqUS8+fPR1xcHGbOnAkAaN26Nf7880/Mnj0biYmJdX7OnuJ0lq38ITZQC7nsxuUP12oX5Ye/zmQDwTHYfiYXgwICaiNEIiIiojK5TQ2wxWLBt99+i4KCAiQkJGD37t0wmUzo16+fo02rVq3QuHFjbNu2DQCwbds2tGvXDmFhYY42iYmJMBgMjl7kbdu2Oe3D3sa+j7IYjUYYDAanhZzZ63/jQipf/mCnUsjRIkQNAPjlQGaNxkVERER0Iy5PgA8cOACdTgeVSoXnn38eP/30E+Lj45Geng6lUgl/f3+n9mFhYUhPTwcApKenOyW/9u32bRW1MRgMKCoqeySC6dOnw8/Pz7FER0fXxKl6DEORCZcLSiABiA2qegIMAC1CbGUT649fhr7IVIPREREREVXM5Qlwy5YtsXfvXuzYsQOjRo3CsGHDcPjwYZfGNGHCBOj1esdy7tw5l8bjbk5f6f2N8FdD7VX+5BcVCdYqUJKVihKLwIr9aTUZHhEREVGFXJ4AK5VKNGvWDJ07d8b06dPRoUMHzJkzB+Hh4SgpKUFubq5T+4yMDISHhwMAwsPDS40KYX98oza+vr7QaMq+eUulUjlGprAvdFWKY/gzXbX3IUkSCg6uBQB8v5tfMIiIiKjuuDwBvp7VaoXRaETnzp3h5eWFdevWObYdO3YMZ8+eRUJCAgAgISEBBw4cQGbm1TrS5ORk+Pr6Ij4+3tHm2n3Y29j3QVUjhECaoRgA0DhQe1P7Kji0EXIJ+PtsLk5n5ddEeEREREQ35NIEeMKECdi8eTNSUlJw4MABTJgwARs3bsQTTzwBPz8/jBw5EuPHj8eGDRuwe/dujBgxAgkJCbj99tsBAP3790d8fDyGDBmCffv2YfXq1Zg4cSJGjx4NlUoFAHj++edx+vRpvPrqqzh69Cg++eQTLF26FOPGjXPlqddbuUUmlJitkMskBHorb2pfloIc3NHENgLED3+fr4nwiIiIiG7IpQlwZmYmhg4dipYtW6Jv377YuXMnVq9ejbvuugsAMHv2bNx9990YPHgwevTogfDwcPz444+O58vlcvz222+Qy+VISEjAk08+iaFDh2Lq1KmONnFxcVixYgWSk5PRoUMHzJw5EwsWLOAQaNWUcaX3N0SnqvLwZ2W5p10oAODHvy/AYuWYwERERFT7XDoO8Oeff17hdrVajblz52Lu3LnltomJicHvv/9e4X569eqFPXv2VCtGcpZhMAIAwnxVNbK/ns0C4atWIE1fjN2pObgtLrBG9ktERERUHrerASb3lnmlBzjMV10j+1MpZOgXbxumbuVBjgZBREREtY8JMFWa1SqQmWfvAa6ZBBgABrWNAACsOpgOK8sgiIiIqJYxAaZKyy4sgdkq4CWX4K/1qrH93tk8GN5KOdL0xdh3PrfG9ktERERUFibAVGn2G+BCfdSQSTd/A5yd2kuOvq1tZRCrDqbX2H6JiIiIysIEmCots4ZvgLvWwLa2iUt+P5gGIVgGQURERLWHCTBVWkZezd4Ad62eLUOg9pLhXHYRDl001Pj+iYiIiOyYAFOlWKwCl/JKAAChPjXfA6xVKtC7pW1MYJZBEBERUW1iAkyVcjnfCIsQUClk8NPU3A1w1xpwTRkEERERUW1hAkyVcnUCDDWkGrwB7lp9WoXCSy7hdFYBUi4V1MoxiIiIiJgAU6Vk5tlHgKj58gc7H7UXbo21zQS3/mhmrR2HiIiIGjYmwFQplwts9b/ButpLgAFbLzDABJiIiIhqDxNgqpScQlsCHOitrNXj2BPgHWcuI99ortVjERERUcPEBJhuqNhkRbHJCgA1OgNcWZqE6BAbpIXJIvDniUu1eiwiIiJqmJgA0w3lFtt6Yn3UCnjJa/8t0/tKL/AGlkEQERFRLWACTDeUW2RLgAO1tVv+YGcvg9hwLJOzwhEREVGNYwJMN5RbbAEABNRy/a/dbXGB0CrlyMwzclY4IiIiqnFMgOmG7D3AAbVc/2unUshxZ7NgAMC6IyyDICIioprFBJhuKLfoSg9wHZVAAM5lEEREREQ1iQkwVUyuQJ7RlgDX9hBo1+rRIgQAsP98LvSFpjo7LhEREXk+hasDIPfmFRAJAUApl0GrlNf4/vV6fZnrtQBiAzVIyS7C2gNnMah9JDQaTY0fn4iIiBoeJsBUIa/AKABAgLcXJEmqsf2ajMWAJENsbGy5bQL6PQffzvfg2UmzIN/7PVJTUpgEExER0U1jAkwVUgQ2AlDzQ6CZzSZAWPHKgpXwDwwus01KTjHWHNcjsmsSDq75BEajkQkwERER3TQmwFQhr6BoAIB/LdX/qrU6aHS+ZW5rovaGdEKPvBIBhV9YrRyfiIiIGh7eBEcVspdA1NUkGNdSKeQI91UDANSxHev8+EREROSZmABTuYQQ8Aq6UgNcR2MAX69xoBYAoI69xSXHJyIiIs/DBJjKlZVfAplKCwmAn6sT4JgOsFg5LTIRERHdPCbAVK6Uy0UAAF+1HAqZa94q4b5qeMklyDU+OJqR75IYiIiIyLMwAaZypWTbEmA/dc2P/1tZMpmESF9b/fH2lLLHDCYiIiKqCibAVK5zOcUAAD+1awcLaXQlAf4rNdelcRAREZFnYAJM5bqoNwIAfFSu6wEG4OgB3nc+DyVmq0tjISIiovqPCTCV64Le1gPs6gQ4QCOHpVCPYrMV+8/nujQWIiIiqv+YAFO53KUHWJIkFJ89AADYfvqyS2MhIiKi+o8JMJXJUGyCodgMAPBRuf5tYk+AtzEBJiIiopvk+syG3NK57EIAgKUgF15y179NjOdsCfDu1BwYzRYXR0NERET1meszG3JL53NsQ6CZ9ZkujsTGdOksArReKDZZsf88h0MjIiKi6mMCTGWy9wCb9ekujuSqLo19AQDbT7EMgoiIiKqPCTCV6WoPcIaLI7mqS2M/AMD2M0yAiYiIqPqYAFOZzufYe4DdowQCuJoAsw6YiIiIboZrp/git3Uu2/16gIMUJQjUeiG70IStRy7glmjfMtupVCpoNJo6jo6IiIjqC/YAUylCCJyz9wDnur4G2GQsBiQZ4uLicO7v9QCAB557FQEBAWUuMbGxKCoqcnHURERE5K7YA0yl5BSaUFhiKzEwG7JcHA1gNpsAYcUrC1bifIkWW1Pz0PaekRj0ysul2hYV5OGtIX1gNBrZC0xERERlYgJMpdhHgAjRKZFqMbk4mqvUWh1iA/ywNTUPGfkmqLQ+kMkkV4dFRERE9QxLIKgU+wgQjfxVLo6ktCCdEiqFDCaLQFa+0dXhEBERUT3EBJhKsdf/RvqpXRxJaTJJQsSVuC7kss6XiIiIqs6lCfD06dNx6623wsfHB6Ghobj//vtx7Ngxpza9evWCJElOy/PPP+/U5uzZs0hKSoJWq0VoaCheeeUVmM1mpzYbN25Ep06doFKp0KxZMyxatKi2T6/espdANPJzvx5gAGjkb6vtvcgEmIiIiKrBpQnwpk2bMHr0aGzfvh3JyckwmUzo378/CgoKnNo988wzSEtLcywzZsxwbLNYLEhKSkJJSQm2bt2KxYsXY9GiRZg0aZKjzZkzZ5CUlITevXtj7969GDt2LJ5++mmsXr26zs61PnGUQLhhDzAANAqwJ8DFEEK4OBoiIiKqb1x6E9yqVaucHi9atAihoaHYvXs3evTo4Viv1WoRHh5e5j7WrFmDw4cPY+3atQgLC0PHjh0xbdo0vPbaa5g8eTKUSiXmz5+PuLg4zJw5EwDQunVr/Pnnn5g9ezYSExNr7wTrqaslEO7ZAxzqo4ZCJqHIZEFOoQmB3kpXh0RERET1iFvVAOv1egBAYGCg0/olS5YgODgYbdu2xYQJE1BYWOjYtm3bNrRr1w5hYWGOdYmJiTAYDDh06JCjTb9+/Zz2mZiYiG3btpUZh9FohMFgcFoaCqtVXHMTnHv2AMtlEsJ9WQdMRERE1eM2w6BZrVaMHTsW3bp1Q9u2bR3rH3/8ccTExCAyMhL79+/Ha6+9hmPHjuHHH38EAKSnpzslvwAcj9PT0ytsYzAYUFRUVGq82OnTp2PKlCk1fo71waV8I0rMVshlEsJ83bMHGAAiAzQ4n1uEi7lFaNfIz9XhEBERUT3iNgnw6NGjcfDgQfz5559O65999lnHz+3atUNERAT69u2LU6dOoWnTprUSy4QJEzB+/HjHY4PBgOjo6Fo5lruxlz+E+9rKDNyV/UY49gATERFRVblFCcSYMWPw22+/YcOGDYiKiqqwbdeuXQEAJ0+eBACEh4cjIyPDqY39sb1uuLw2vr6+Zc4WplKp4Ovr67Q0FBdyiwFcvdHMXYX7qiFJQF6xGYZi95msg4iIiNyfSxNgIQTGjBmDn376CevXr0dcXNwNn7N3714AQEREBAAgISEBBw4cQGZmpqNNcnIyfH19ER8f72izbt06p/0kJycjISGhhs7Ec6Rd6VF1xzGAr6VUyBDqYyvR4HBoREREVBUuTYBHjx6Nr7/+Gt988w18fHyQnp6O9PR0FBXZEppTp05h2rRp2L17N1JSUvDLL79g6NCh6NGjB9q3bw8A6N+/P+Lj4zFkyBDs27cPq1evxsSJEzF69GioVLYE6fnnn8fp06fx6quv4ujRo/jkk0+wdOlSjBs3zmXn7q7S9LYe4Ah/9+4BBq4pg8hhAkxERESV59IEeN68edDr9ejVqxciIiIcy3fffQcAUCqVWLt2Lfr3749WrVrhpZdewuDBg/Hrr7869iGXy/Hbb79BLpcjISEBTz75JIYOHYqpU6c62sTFxWHFihVITk5Ghw4dMHPmTCxYsIBDoJUh3Z4Au3kPMABE+l8dD5iIiIioslx6E9yNJjGIjo7Gpk2bbrifmJgY/P777xW26dWrF/bs2VOl+BqiNL2tN9U+zJg7syfA2YUlKCqxQKOUuzgiIiIiqg/c4iY4ch/2EojIelACofGSI+jKJBgX9SyDICIiosphAkwOJosVWflGAEB4PSiBAK4m6qwDJiIiospiAkwOGYZiCAEo5TIEauvH9MKR/pwRjoiIiKqGCTA52G+AC/NTQebGk2Bcyz4SRNaVGeyIiIiIbsRtZoKjulNUVASj0Vhq/am0ywCAUG8v5ObmQq/X13VoVeaj9oKvWgFDsRlp+iKEuu/szUREROQmmAA3MEVFRYiJjUXWNROH2Pne9gACeo/E5lW/IGBMD8d6s9m9Z1qL9NfAkJ6Hi7nFCA3zcnU4RERE5OaYADcwRqMRWZmZmPjVemi8fZy2bU3Nw8H0QtzRbxC6PvUIcjLT8P7z98Jstrgo2spp5K/B0fQ8XMgtQkcmwERERHQDTIAbKI23DzQ6X6d1xZYCAIC/jzc0Ol8UFeS5IrQqs9cBpxuKYbH63KA1ERERNXS8CY4c8oy2Ugcfdf36XuSv9YLGSw6LVSCrwL3LNYiIiMj1mACTQ77RDADQqepXAixJkmM4tPQ8JsBERERUMSbABACwWAUKjLZa3/qWAANXyyDS8kpcHAkRERG5OybABAAoKLH1/sokQKuUuziaqrMnwBl5JkDi25qIiIjKx0yBAAD5xVfLHySpfkyCca1gHxWUchlKLAJeITGuDoeIiIjcGBNgAlB/63/tZJKECD9bHbA6qo2LoyEiIiJ3xgSYAFyTANezESCuFRlgK4NQRTMBJiIiovIxASYAQN6VEggfVf2dSKKRny0BVke1hRDCxdEQERGRu2ICTAA8owc4zFcFmQTIdQE4m1Ps6nCIiIjITTEBJgDON8HVVwq5DKE6Ww/2nnMGF0dDRERE7ooJMAGo/zfB2YX7KAEAf59nAkxERERlYwJMsFoFCq4kwPVtGuTrRfjYeoD/Zg8wERERlYMJMKGgxAwB2yQYmno4Cca1wnReEFYLzucWI8PAOmAiIiIqjQkwOaZA1ioVkNXDSTCupVTIUJJ5BgDw15lsF0dDRERE7ogJMDmmQfZW1e/eXzvj+UMAmAATERFR2ZgAk8fcAGdnPGdLgHemMAEmIiKi0pgAk+MGOG+lZyTAxVd6gI9l5EFfaHJxNERERORumACTowbY20N6gK2FesQGaiAEsCuVvcBERETkjAkweVwNMADcEu0LgHXAREREVBoTYLpaAuEhPcAA0NmeALMOmIiIiK7DBJiulkB4SA0wANwSZUuAD5zXo6jE4uJoiIiIyJ0wAW7gLFaBIpMtQfSUUSAAINJPhQg/NcxWgT1nc1wdDhEREbkRJsANnL3+VyYBai/PeTtIkoRbYwMBsAyCiIiInHlOxkPVcm39r1TPZ4G73m1xtgR4x2kmwERERHQVE+AGzhPrf+3uaBoEANidmsM6YCIiInJgAtzAXe0B9pwh0Ozigr3RyF+DEosVO85cdnU4RERE5CaYADdwV8cA9rweYEmS0L15MADgjxOXXBwNERERuQsmwA1cvgeOAXyt7s1DAAB/MgEmIiKiK5gAN3D2GmCdB9YAA0C3ZkGQJOBYRh4yDMWuDoeIiIjcABPgBs4Tp0G+lr9WifZR/gBYBkFEREQ2TIAbOE+cBvl6PRx1wFkujoSIiIjcQbUS4NOnT9d0HOQCZqsVxSYrAM9OgO9sZkuA/zxxCVarcHE0RERE5GrVSoCbNWuG3r174+uvv0ZxMesq66vCK/W/ckmCWuG5fwy4pXEAvJVyXC4oweE0g6vDISIiIherVtbz999/o3379hg/fjzCw8Px3HPP4a+//qrp2KiWXVv/62mzwF1LqZAh4cqkGJtZBkFERNTgVSsB7tixI+bMmYOLFy/iiy++QFpaGu688060bdsWs2bNQlYWk4z6wNOHQLtWjxa24dA2HuV7k4iIqKG7qb97KxQKPPjgg1i2bBneffddnDx5Ei+//DKio6MxdOhQpKWlVfj86dOn49Zbb4WPjw9CQ0Nx//3349ixY05tiouLMXr0aAQFBUGn02Hw4MHIyMhwanP27FkkJSVBq9UiNDQUr7zyCsxms1ObjRs3olOnTlCpVGjWrBkWLVp0M6fuETx5GuTr9W0dBgDYlZqN7IISF0dDRERErnRTCfCuXbvwz3/+ExEREZg1axZefvllnDp1CsnJybh48SLuu+++Cp+/adMmjB49Gtu3b0dycjJMJhP69++PgoICR5tx48bh119/xbJly7Bp0yZcvHgRDz74oGO7xWJBUlISSkpKsHXrVixevBiLFi3CpEmTHG3OnDmDpKQk9O7dG3v37sXYsWPx9NNPY/Xq1Tdz+vWeJ0+DfL1G/hrER/jCKoD1RzNdHQ4RERG5ULW6/mbNmoWFCxfi2LFjGDRoEL788ksMGjQIMpktn46Li8OiRYsQGxtb4X5WrVrl9HjRokUIDQ3F7t270aNHD+j1enz++ef45ptv0KdPHwDAwoUL0bp1a2zfvh2333471qxZg8OHD2Pt2rUICwtDx44dMW3aNLz22muYPHkylEol5s+fj7i4OMycORMA0Lp1a/z555+YPXs2EhMTq3MJPIInT4Ncln7xYTicZsDawxn4R+coV4dDRERELlKtHuB58+bh8ccfR2pqKpYvX467777bkfzahYaG4vPPP6/SfvV6PQAgMDAQALB7926YTCb069fP0aZVq1Zo3Lgxtm3bBgDYtm0b2rVrh7CwMEebxMREGAwGHDp0yNHm2n3Y29j3cT2j0QiDweC0eCJHCUQDSYD7x9veI5tPZKHYZHFxNEREROQq1cp8Tpw4ccM2SqUSw4YNq/Q+rVYrxo4di27duqFt27YAgPT0dCiVSvj7+zu1DQsLQ3p6uqPNtcmvfbt9W0VtDAYDioqKoNFonLZNnz4dU6ZMqXTs9ZWjBELp+SUQANAm0hfhvmqkG4qx7fRl9G4Z6uqQiIiIyAWq1QO8cOFCLFu2rNT6ZcuWYfHixdUKZPTo0Th48CC+/fbbaj2/Jk2YMAF6vd6xnDt3ztUh1Qp7AqxrID3AkiShX7wt6U0+nHGD1kREROSpqpUAT58+HcHBwaXWh4aG4p133qny/saMGYPffvsNGzZsQFTU1drM8PBwlJSUIDc316l9RkYGwsPDHW2uHxXC/vhGbXx9fUv1/gKASqWCr6+v0+JpLFaBYrNtFjhtA0mAAaDfldEg1h3J4KxwREREDVS1EuCzZ88iLi6u1PqYmBicPXu20vsRQmDMmDH46aefsH79+lL77Ny5M7y8vLBu3TrHumPHjuHs2bNISEgAACQkJODAgQPIzLx6Z39ycjJ8fX0RHx/vaHPtPuxt7PtoiAqvTIHs6bPAXS+haRC8lXJkGIw4eFHv6nCIiIjIBaqV+YSGhmL//v2l1u/btw9BQUGV3s/o0aPx9ddf45tvvoGPjw/S09ORnp6OoqIiAICfnx9GjhyJ8ePHY8OGDdi9ezdGjBiBhIQE3H777QCA/v37Iz4+HkOGDMG+ffuwevVqTJw4EaNHj4ZKpQIAPP/88zh9+jReffVVHD16FJ988gmWLl2KcePGVef0PUKRyd7769mzwF1PpZCjZ0vbpBgrD6a7OBoiIiJyhWolwI899hheeOEFbNiwARaLBRaLBevXr8eLL76IRx99tNL7mTdvHvR6PXr16oWIiAjH8t133znazJ49G3fffTcGDx6MHj16IDw8HD/++KNju1wux2+//Qa5XI6EhAQ8+eSTGDp0KKZOnepoExcXhxUrViA5ORkdOnTAzJkzsWDBggY9BFphiW0UBG0DuQHuWkntIgEAv+67CCFYBkFERNTQVKv4c9q0aUhJSUHfvn2hUNh2YbVaMXTo0CrVAFcm+VCr1Zg7dy7mzp1bbpuYmBj8/vvvFe6nV69e2LNnT6Vj83T2EghPnQXOPqReWTpFKKHxkuF8ThH+OHwetzYJLrMWnIiIiDxTtbIfpVKJ7777DtOmTcO+ffug0WjQrl07xMTE1HR8VEsKrymB8CQmYzEgyW44CUvw3S/Du00v3P/iNCgO/IzUlBQmwURERA3ETXX/tWjRAi1atKipWKgOeWoPsNlsAoQVryxYCf/A0iOV2KXmGLH6eC7Cbr8fR9d/DqPRyASYiIiogahW9mOxWLBo0SKsW7cOmZmZsFqtTtvXr19fI8FR7bHXAHtaAmyn1uqg0ZU/fF1zrcDG0wYUma1QRbepw8iIiIjI1aqV/bz44otYtGgRkpKS0LZt2wY1ioCnsI8C4e1hJRCVJZdJaBaqw6GLBni37uHqcIiIiKgOVSsB/vbbb7F06VIMGjSopuOhOuKoAfbQHuDKaBHmg0MXDdC27AaTxXrjJxAREZFHqNYwaEqlEs2aNavpWKjOSA2+BxgAogI00HjJINf4YsvpHFeHQ0RERHWkWgnwSy+9hDlz5nAM1XpKpvGBfRbghtwDLJMkNA9SAwCW78u8QWsiIiLyFNXKfv78809s2LABK1euRJs2beDl5eW0/dqJKsj9yL0DAABqLxnksoZdv90yVIP96YX441Q2Mg3FCPVVuzokIiIiqmXVSoD9/f3xwAMP1HQsVEfkOlsC7KkjQFRFgEaB4vOHoY6Kx/d/n8c/e7G0h4iIyNNVKwNauHBhTcdBdcjeA+xpk2BUV/7+NVBHxWPpznMY1bMpRzUhIiLycNWqAQYAs9mMtWvX4tNPP0VeXh4A4OLFi8jPz6+x4Kh2yL0DAbAH2K7w6J/QKmVIuVyIHWeyXR0OERER1bJqJcCpqalo164d7rvvPowePRpZWVkAgHfffRcvv/xyjQZINY8lEM6EqRgDWocAAL7bec7F0RAREVFtq1YC/OKLL6JLly7Iyclxmj72gQcewLp162osOKodLIEo7YEOYQCA3w+kIbewxMXREBERUW2qVgL8xx9/YOLEiVAqlU7rY2NjceHChRoJjGqPPQFmD/BVbSN0aB3hC6PZyl5gIiIiD1etBNhqtcJisZRaf/78efj4+Nx0UFS77CUQWiV7gO0kScKIO2IBAF9uS4WZM8MRERF5rGolwP3798cHH3zgeCxJEvLz8/Hmm29yeuR6wNEDrGIP8LXu7RiJQG8lLuQWYe2RDFeHQ0RERLWkWhnQzJkzkZiYiPj4eBQXF+Pxxx/HiRMnEBwcjP/97381HSPVoGKTBTK1DgDgzR5gB71eDwB4oH0oPt92Hv/ddBK3R2lKtVOpVE5170RERFT/VCsBjoqKwr59+/Dtt99i//79yM/Px8iRI/HEE08wOXBzlwtMAAC5BCgV1R4Fz2OYjMWAJENsbCwAQK4LQqNRX2D3OQNCW3aCKfOMU/uQ0FCkpqTwfU5ERFSPVftv4AqFAk8++WRNxkJ14FKBbYQDrVLGCR8AmM0mQFjxyoKV8A8MBgCsPZGL09lG9Hr1v+jVxM/RtqggD28N6QOj0cgEmIiIqB6rVgL85ZdfVrh96NCh1QqGat+lfFsPsNaL5Q/XUmt10Oh8AQBdmnjhdPZ5nLpkRPeWWuhYK01ERORRqvWb/cUXX3R6bDKZUFhYCKVSCa1WywTYjdl7gDVeLH8oT4SfBhF+aqTpi7HnbA66Nw9xdUhERERUg6qVBeXk5Dgt+fn5OHbsGO68807eBOfmLuVfKYFgAlyhW2Nt00UfuKBHsan0kH9ERERUf9VYFtS8eXP85z//KdU7TO7l0pWb4LRKJsAViQ3SIkinhMkisP+83tXhEBERUQ2q0SxIoVDg4sWLNblLqmH2HmCWQFRMkiR0ibGNl7z3XC5MnBiDiIjIY1SrBviXX35xeiyEQFpaGj7++GN069atRgKj2nHZPgoEb4K7oRahPth+Ohv6IhMOXTSgZQC/NBAREXmCaiXA999/v9NjSZIQEhKCPn36YObMmTURF9WSrHyWQFSWTCahU2N/bDiWhd2pOWjqF+jqkIiIiKgGVCsBtlr55+D6yGIVyC7gTXBVER/pi50pOcg3mnE0s8jV4RAREVENYBbUgGQXlMAiACGsrAGuJIVMhltjr9QCXyyApFC6OCIiIiK6WdXqAR4/fnyl286aNas6h6BakJVnBABYC/WQSREujqb+aBPph12pOcgrNkPXcYCrwyEiIqKbVK0EeM+ePdizZw9MJhNatmwJADh+/Djkcjk6derkaMepdt1LZl4xAMBSkOvaQOoZuUzCbbGBWHc0E35dH0KRyQJ/VwdFRERE1VatBPiee+6Bj48PFi9ejIAA25+Hc3JyMGLECHTv3h0vvfRSjQZJNSPzSg+wJT/bxZHUP60jfPHXmcvIQwCW/p2OFxODXB0SERERVVO1CkFnzpyJ6dOnO5JfAAgICMBbb73FUSDcmL0EwlLABLiq5DIJnRp5AwC+2HYe+iKTiyMiIiKi6qpWAmwwGJCVlVVqfVZWFvLy8m46KKodjgQ4P8fFkdRPzYPVKLl0FvpiMz7ddMrV4RAREVE1VSsBfuCBBzBixAj8+OOPOH/+PM6fP48ffvgBI0eOxIMPPljTMVINuVoDzAS4OmSShNxNiwEAX2w5gwxDsYsjIiIiouqoVgI8f/58DBw4EI8//jhiYmIQExODxx9/HAMGDMAnn3xS0zFSDcliDfBNKzq5Ax0a+aDYZMUHa0+4OhwiIiKqhmolwFqtFp988gkuX77sGBEiOzsbn3zyCby9vWs6RqohmSyBqBEv9ooBACzddQ6nsvJdHA0RERFV1U3NhpCWloa0tDQ0b94c3t7eEELUVFxUw4QQyDTYb4JjAnwzOkX7oW+rUFisAtN/P+LqcIiIiKiKqpUAX758GX379kWLFi0waNAgpKWlAQBGjhzJIdDcVL7RjCKTBQBHgagJEwa1hlwmYe2RTPxxovQNoUREROS+qpUAjxs3Dl5eXjh79iy0Wq1j/SOPPIJVq1bVWHBUc+z1v95KOYTJ6OJo6r9moToMud1WCjHtt8MwW6wujoiIiIgqq1oJ8Jo1a/Duu+8iKirKaX3z5s2RmppaI4FRzbLX/wbrvFwciecY2685/LVeOJ6Rj//tPOfqcIiIiKiSqpUAFxQUOPX82mVnZ0OlUt10UFTzHAmwt9LFkXgOf60S4/q1AADMWnMM+kJOjkFERFQfVCsB7t69O7788kvHY0mSYLVaMWPGDPTu3bvGgqOak+XoAWYCXJMe79oYzUJ1yCk04cP1HBaNiIioPlBU50kzZsxA3759sWvXLpSUlODVV1/FoUOHkJ2djS1bttR0jFQD7JNgBHuzBKImecll+L+74zHsi7+weGsKHu/aGE1DdK4Oi4iIiCpQrR7gtm3b4vjx47jzzjtx3333oaCgAA8++CD27NmDpk2bVno/mzdvxj333IPIyEhIkoTly5c7bR8+fDgkSXJaBgwY4NQmOzsbTzzxBHx9feHv74+RI0ciP995bNb9+/eje/fuUKvViI6OxowZM6pz2vValoE9wLWlZ4sQ9G4ZArNV4J0VHBaNiIjI3VW5B9hkMmHAgAGYP38+3njjjZs6eEFBATp06ICnnnqq3CmUBwwYgIULFzoeX19j/MQTTyAtLQ3JyckwmUwYMWIEnn32WXzzzTcAAIPBgP79+6Nfv36YP38+Dhw4gKeeegr+/v549tlnbyr++iQrnzXAtemNpHj8cWIz1h3NxObjWejRIsTVIREREVE5qpwAe3l5Yf/+/TVy8IEDB2LgwIEVtlGpVAgPDy9z25EjR7Bq1Srs3LkTXbp0AQB89NFHGDRoEN5//31ERkZiyZIlKCkpwRdffAGlUok2bdpg7969mDVrVoNKgDPZA1yrmoXqMCQhBgu3pGDab4fx+4vd4SW/qXlmiIiIqJZU6zf0k08+ic8//7ymYynTxo0bERoaipYtW2LUqFG4fPmyY9u2bdvg7+/vSH4BoF+/fpDJZNixY4ejTY8ePaBUXk38EhMTcezYMeTklD0jmtFohMFgcFrqO3sNcAiHQas1Y/u2QIDWCycy87F4a4qrwyEiIqJyVOsmOLPZjC+++AJr165F586d4e3t7bR91qxZNRLcgAED8OCDDyIuLg6nTp3Cv//9bwwcOBDbtm2DXC5Heno6QkNDnZ6jUCgQGBiI9PR0AEB6ejri4uKc2oSFhTm2BQQElDru9OnTMWXKlBo5B3dQYrYi58oQXUEsgag1flovvDagFV7/8QA+WHsCd7UMhF8VLrdKpYJGo6m9AImIiAhAFRPg06dPIzY2FgcPHkSnTp0AAMePH3dqI0lSjQX36KOPOn5u164d2rdvj6ZNm2Ljxo3o27dvjR3nehMmTMD48eMdjw0GA6Kjo2vteLXt0pX6Xy+5BH9Ntb7zUCU93CUa3+48h73nctFtzCxcWDat0s8NCQ1FakoKk2AiIqJaVqVsqHnz5khLS8OGDRsA2KY+/vDDDx09qrWtSZMmCA4OxsmTJ9G3b1+Eh4cjMzPTqY3ZbEZ2drajbjg8PBwZGRlObeyPy6stVqlUHjWhh30SjBCdqka/oFBpMpmEt+5vi3s//hOKJl0xcl4ymoT53/B5RQV5eGtIHxiNRibAREREtaxKCbAQwunxypUrUVBQUKMBVeT8+fO4fPkyIiIiAAAJCQnIzc3F7t270blzZwDA+vXrYbVa0bVrV0ebN954AyaTCV5etvrX5ORktGzZsszyB0+UabhS/+vjOUm9K+n1+gq3R3kD97UJxE8Hs7Er3YxWcT6Qy/jFg4iIyF3c1N/Dr0+Iqyo/Px8nT550PD5z5gz27t2LwMBABAYGYsqUKRg8eDDCw8Nx6tQpvPrqq2jWrBkSExMBAK1bt8aAAQPwzDPPYP78+TCZTBgzZgweffRRREZGAgAef/xxTJkyBSNHjsRrr72GgwcPYs6cOZg9e/ZNxV6f2IdAC/FRuziS+s1kLAYkGWJjY2/YVqbyRuQznyIX/thzNgddYgNrP0AiIiKqlColwPbJKK5fV127du1ymjrZXnc7bNgwzJs3D/v378fixYuRm5uLyMhI9O/fH9OmTXMqT1iyZAnGjBmDvn37QiaTYfDgwfjwww8d2/38/LBmzRqMHj0anTt3RnBwMCZNmtQgh0AL9WUP8M0wm02AsOKVBSvhHxhcYduczDTM+/gDBCeNx44z2WgZ7gMfNUfgICIicgdVLoEYPny4IwEtLi7G888/X2oUiB9//LFS++vVq1eFvcirV6++4T4CAwMdk16Up3379vjjjz8qFZMnstcAh7IEokaotTpodL4VtikqyEPBwfWIf/gVZBZYsPn4JSS1j6ijCImIiKgiVUqAhw0b5vT4ySefrNFgqHZk2W+CYwJc57o20uC3E/k4mZWP1MsFiAnyvvGTiIiIqFZVKQG+dkpiqj+yrkyCEcoa4DoXoJGjQ5Q/9p7LxYZjWXjydg0UMs4QR0RE5Er8TdwAsATCtW5vEghvpRz6IhP+Ts11dThEREQNHhNgD2e1CpZAuJhKIUf35iEAgL9SsmEoMrk4IiIiooaNCbCHyy0ywWy13WgYrGMC7CotwnSICtDAYhXYdDzL1eEQERE1aEyAPVzmlfrfQG8llAq+3K4iSRJ6tQiBTAJOXyrA6Uv5rg6JiIiowWJG5OEcYwCz/MHlgnQq3NLYNvvgpmNZMFmsLo6IiIioYWIC7OFY/+tebosNhE6lgKHYjF0pOa4Oh4iIqEFiAuzhMpkAuxWlQoaeLWw3xO1OzUFOQYmLIyIiImp4mAB7uEyOAex2moZ4IzZIC4sQ2HAss8LZEImIiKjmMQH2cOwBdj+SJKFXy1DIZRLO5RTheAZviCMiIqpLTIA9XBYnwXBLfhov3BpruyFu84kslJh5QxwREVFdYQLs4ZgAu6/OMQHw13ihsMSCXRcKXB0OERFRg8EE2MNlGq7UAPuyBtjdKGQy9GppuyHuUHohvELjXBwRERFRw8AE2IMVGM0oKLEAYA2wu4oJ8kaLUB0EgKD+o2HlDXFERES1jgmwB7OXP2iVcuhUChdHQ+Xp3iIEXjIJqkatsHx/hqvDISIi8nhMgD1YJut/6wWdSoEuUd4AgDkbUpHNsYGJiIhqFRNgD8ZZ4OqPNuFalGSegb7YjHdXHnV1OERERB6NCbAH4yQY9YdMkpC9Zi4A4Ltd57A7NdvFEREREXkuJsAejJNg1C/GC0fxQPtQAMAbPx2E2cKxgYmIiGoDE2APlmm4UgPsywS4vnihVyz8tV44mp6HRVtTXB0OERGRR2IC7MGy8q/0AOuYANcXAVovvD6gFQBgdvJxpOuLXRwRERGR52EC7ME4CUb99HCXaHRq7I+CEgumrTjs6nCIiIg8DhNgD8ZpkOsnmUzCW/e3g0wCVuxPw+bjWa4OiYiIyKMwAfZQJosV2YW28WR5E1z9Ex/pi+F32KZGnvTzQRSbLC6OiIiIyHMwAfZQl/NLIASgkEkI1CpdHQ5Vkl6vR25uLnJzc/HUbaEI0Xkh5XIhPlxz2LE+NzcXRUVFrg6ViIio3mIC7KHsYwAH61SQySQXR0M3YjIWA5IMsbGxCAgIQEBAAKLDQ3B4yVsAgLkbTiIkrrVjW0xsLJNgIiKialK4OgCqHY76Xw6BVi+YzSZAWPHKgpXwDwx2rBdC4PejubhgAG5/7UsMaOGP4sJ8vDWkD4xGIzQajQujJiIiqp/YA+yhHJNgcAi0ekWt1UGj83UsWh8/9G0TAbkk4VxuCS4WyaHx9nF1mERERPUaE2APleEYAo0JcH0XoFWic0wAAGDziSyYLcLFEREREdVvTIA9lD0BDuMYwB7h1tgA+KgVyCs2Y29agavDISIiqteYAHso+wxi4UyAPYJCLkP35rba4H0XC6DwC3NxRERERPUXE2APlW6w1QCH+TEB9hTNQnSIDtDAIoCAPk+7OhwiIqJ6iwmwh7KXQEQwAfYYkiShZ4sQSAC0LRKw9UyOq0MiIiKql5gAe6BikwXZBbZZ4FgC4VmCdCq0CdcCAGYkn0GJ2eriiIiIiOofJsAeKPNK+YNKIYOfxsvF0VBN69LIG5aCHKRkF2Hx1hRXh0NERFTvMAH2QOlXyh/C/dSQJM4C52mUChlyNi0GAMxZdwKZV15vIiIiqhwmwB4onUOgebyCA+vQNkKHfKMZ76465upwiIiI6hUmwB4og0OgNQACr93VBADww9/nsTuVN8QRERFVFhNgD3RtCQR5rnaRPni4SxQAYPIvh2CxcoY4IiKiymAC7IFYAtFwvJLYCj4qBQ5c0GPZrnOuDoeIiKheYALsgVgC0XCE+Kgw9q4WAIAZq49BX2hycURERETujwmwB2IJRMMyNCEGzUN1yC4owey1x10dDhERkdtzaQK8efNm3HPPPYiMjIQkSVi+fLnTdiEEJk2ahIiICGg0GvTr1w8nTpxwapOdnY0nnngCvr6+8Pf3x8iRI5Gfn+/UZv/+/ejevTvUajWio6MxY8aM2j41l7FahWMWOCbADYOXXIbJ97YBAHy1PRVH0w0ujoiIiMi9uTQBLigoQIcOHTB37twyt8+YMQMffvgh5s+fjx07dsDb2xuJiYkoLr467ukTTzyBQ4cOITk5Gb/99hs2b96MZ5991rHdYDCgf//+iImJwe7du/Hee+9h8uTJ+Oyzz2r9/Fwhu7AEJouAJAGhPipXh0N1pFuzYAxsGw6LVWDyL4cgBG+IIyIiKo/ClQcfOHAgBg4cWOY2IQQ++OADTJw4Effddx8A4Msvv0RYWBiWL1+ORx99FEeOHMGqVauwc+dOdOnSBQDw0UcfYdCgQXj//fcRGRmJJUuWoKSkBF988QWUSiXatGmDvXv3YtasWU6JsqdIv1L/G+StgpecFS6eTK/XOz3+V/dGWH80E9tPZ2Pp9lNIbB0MAFCpVNBoNK4IkYiIyC25bYZ05swZpKeno1+/fo51fn5+6Nq1K7Zt2wYA2LZtG/z9/R3JLwD069cPMpkMO3bscLTp0aMHlEqlo01iYiKOHTuGnJyyx041Go0wGAxOS31xtfyBvb+eymQsBiQZYmNjERAQ4FjaxEYgY+NXAICXvvoTgaHhCAgIQExsLIqKilwcNRERkftwaQ9wRdLT0wEAYWFhTuvDwsIc29LT0xEaGuq0XaFQIDAw0KlNXFxcqX3YtwUEBJQ69vTp0zFlypSaOZE65rgBjiNAeCyz2QQIK15ZsBL+gcHO26wCy/ZfQp5vCO57fxXaBgq8NaQPjEYje4GJiIiucNseYFeaMGEC9Hq9Yzl3zv3HVy0qKkJubi5SM3IBAAFqGXJzc0st1//ZnOovtVYHjc7XafHx9UOPFrYvePvTC2GSM+klIiK6ntsmwOHh4QCAjIwMp/UZGRmObeHh4cjMzHTabjabkZ2d7dSmrH1ce4zrqVQq+Pr6Oi3urKioCDFX/hw+a/4XAID/znnP6c/j9iU2NhbAlV5E8khNQ7wRHaiBxSqwLTX/xk8gIiJqYNy2BCIuLg7h4eFYt24dOnbsCMA2osOOHTswatQoAEBCQgJyc3Oxe/dudO7cGQCwfv16WK1WdO3a1dHmjTfegMlkgpeXFwAgOTkZLVu2LLP8oT4yGo3IyszExK/WY8M5M87rS3Df8NFo+crLpdrmZKbh/efvhdlscUGkVBckSUKvFqFYsiMVqblGqOM6uTokIiIit+LSHuD8/Hzs3bsXe/fuBWC78W3v3r04e/YsJEnC2LFj8dZbb+GXX37BgQMHMHToUERGRuL+++8HALRu3RoDBgzAM888g7/++gtbtmzBmDFj8OijjyIyMhIA8Pjjj0OpVGLkyJE4dOgQvvvuO8yZMwfjx4930VnXHo23D4rMtp8DfEv/eVyj84XaW+faIKlOBHor0SHa3/Zz32dhslhdGxAREZEbcWkP8K5du9C7d2/HY3tSOmzYMCxatAivvvoqCgoK8OyzzyI3Nxd33nknVq1aBbX66g1eS5YswZgxY9C3b1/IZDIMHjwYH374oWO7n58f1qxZg9GjR6Nz584IDg7GpEmTPHIINADIN9oyYJ3KbTv3qY50jQvE0TQDEBSFJbsuYmxioKtDIiIicgsuzZJ69epV4YD9kiRh6tSpmDp1arltAgMD8c0331R4nPbt2+OPP/6odpz1hdkiYDTbevp0aibADZ1KIcdt0TpsOm3AZ1vO4bGEZgjj6CBERETuexMcVV2ByVbX6yWXoOQkGASgRbAaxgtHUVhixbsrj7o6HCIiIrfALMmDFJTYen+9VQpIkuTiaMgdSJKE7LWfQgLw454L2J2a7eqQiIiIXI4JsAfJN9p6gFn/S9cqST+B+9vbJoyZ9PMhWKzllx0RERE1BEyAPUh+iS0B9lV7uTgScjf/6hkDH7UChy4a8N1O95/YhYiIqDYxAfYg+UZbCYQPb4Cj68jNRRh1ZzQAYMaqI0hNyypzpsCioiIXR0pERFT7mCl5EHsPMBNgsjMZiwFJZpsBUCZHxPAPkRsSg1uGTkLO2vml2oeEhiI1JQUaDadQJiIiz8VMyYPYa4BZAkF2ZrMJEFa8smAl/AODcVFfgt+O5sCv890YMWwogryvvleKCvLw1pA+MBqNTICJiMijsQTCg+SxB5jKodbaZgZs2igYzUN1EAC2ny+C2tvn6kyB3j6uDpOIiKhOMAH2EDKNL+yz3XISDKrInc2DoZBJuJBbhOMZ+a4Oh4iIqM4xAfYQCt8QAIC3Ug6FjC8rlc9X7YUusQEAgD9PXkLJldkDiYiIGgpmSh5C7mcb59WH9b9UCZ0bB8BXrUC+0YxdnByDiIgaGCbAHsLeA8z6X6oMhVyGHi1s75m/U3ORW1ji4oiIiIjqDhNgD6HwtfUAcwQIqqwmwd5oHKiFRQhsPnHJ1eEQERHVGSbAHkLOHmCqIkmS0LNFCGQScOZSAc7mGl0dEhERUZ1gAuwh7D3ATICpKgK9legY7Q8A2JaaB8j5/iEiIs/HBNhDKHgTHFXTbXGB0Crl0Bdb4NvlPleHQ0REVOuYAHuAIpMFcq0fAMCXPcBURSqFHHc2CwYA+N3xKDLyWApBRESejQmwB0g32BIWL7kElZfcxdFQfdQq3AdhOi/IlBrM2Zjq6nCIiIhqFRNgD5B2JQHWKZn8UvVIkoQ7Yn0ghBW/H8rCzhSODUxERJ6LCbAHSNPbEmAfFV9Oqr4Qby/k71sDAHjz50OwWIWLIyIiIqodzJg8QDp7gKmG5G7+Ej4qOQ6nGfDNX2ddHQ4REVGtYALsAew9wDoVE2C6OdYiA/7ZvTEAYOaaY8gp4AxxRETkeZgAewBHDTATYKoBD3WKQKtwH+QWmjAz+ZirwyEiIqpxTIA9wNWb4Phy0s1TyCS8eU8bAMA3O87i0EW9iyMiIiKqWcyY6jmLVSAzz/Znah/2AFMNSWgahKT2EbAKYPIvhyAEb4gjIiLPwQS4nsswFMNsFRAWMzRefDmp5rwxqDU0XnLsTMnBL/suujocIiKiGsOMqZ5LvVwIADDrMyCTJBdHQ54k0l+D0b2bAgDe+f0ICoxmF0dERERUM5gA13OplwsAAOacNBdHQp7o6e5N0DhQiwyDER9vOOnqcIiIiGoEE+B6LuVKD7Aph3+ippqn9pLj/+6OBwAs+OM0zlwqcHFEREREN48JcD3n6AHOZQ8w1Qy9Xo/c3FzH0iVCiW5N/GGyCPzfT/ucthUVFbk6XCIioipTuDoAujlXe4CZANPNMRmLAUmG2NjYUtsUgY0Q+dTH+PNUDiK79EfRqZ0AgJDQUKSmpECj0dRxtERERNXHBLgeE0JcUwPMEgi6OWazCRBWvLJgJfwDg0tt3342D/vTCtHsial4qH0QSory8daQPjAajUyAiYioXmECXI9l5RlRWGKBXALM+kxXh0MeQq3VQaPzLbW+WwsdTl1OgcFoweFsC9oF+7ggOiIiopvHGuB6zF7+EOGnBqwcoopql1Ihw53NbD3DO89kw1BscXFERERE1cMEuB5LuVL+EB2gdnEk1FC0DPdBlL8GZqvAllSDq8MhIiKqFibA9VgqE2CqY5IkoXerUMgk4FxuCbQtu7k6JCIioipjAlyP2Usgov2ZAFPdCfRWoktMIAAgoO+zyOcMcUREVM8wAa7H7D3AjQN4Bz7VrVtjA+CrkkPhE4S5m8+6OhwiIqIqYQJcTwkhkHrpSg8wSyCojinkMtwZZxsF4ru/03DgvN7FEREREVUeE+B66nJBCfKMZkgS0IglEOQCUX4qFBzeCKsA/v3TAViswtUhERERVQoT4HrKXv4Q6aeBSsGXkVwje/0C6FRyHLigx1fbUlwdDhERUaUwc6qnUq6UP8QEaV0cCTVk1oJcvNgrBgDw/prjSNcXuzgiIiKiG2MCXE/Ze4BjgrxdHAk1dIM7huOWxv7IN5rx758OQAiWQhARkXtjAlxP2YdAiwtmDzC5lkySMGNweyjlMqw/mollu8+7OiQiIqIKuXUCPHnyZEiS5LS0atXKsb24uBijR49GUFAQdDodBg8ejIyMDKd9nD17FklJSdBqtQgNDcUrr7wCs7n+j1vKHmByJ83DfDC+fwsAwLRfD+NibpGLIyIiIiqfWyfAANCmTRukpaU5lj///NOxbdy4cfj111+xbNkybNq0CRcvXsSDDz7o2G6xWJCUlISSkhJs3boVixcvxqJFizBp0iRXnEqNEULgzCV7AsweYHIPz3Rvgk6N/ZFnNOO1H/azFIKIiNyW2yfACoUC4eHhjiU4OBgAoNfr8fnnn2PWrFno06cPOnfujIULF2Lr1q3Yvn07AGDNmjU4fPgwvv76a3Ts2BEDBw7EtGnTMHfuXJSUlJR7TKPRCIPB4LS4k8w8IwzFZshlEmLZA0xuQi6T8P5DHaBSyPDHiUv4YkuKq0MiIiIqk9snwCdOnEBkZCSaNGmCJ554AmfP2mad2r17N0wmE/r16+do26pVKzRu3Bjbtm0DAGzbtg3t2rVDWFiYo01iYiIMBgMOHTpU7jGnT58OPz8/xxIdHV1LZ1c9R9PzAACxQVqoveQujoYaOr1ej9zcXOTm5iLQy4zxfWIBANN/P4ItR845thUVsSyCiIjcg1snwF27dsWiRYuwatUqzJs3D2fOnEH37t2Rl5eH9PR0KJVK+Pv7Oz0nLCwM6enpAID09HSn5Ne+3b6tPBMmTIBer3cs586dq9kTu0nHryTALcN9XBwJNWQmYzEgyRAbG4uAgADH8nzfeBQc2wKzVeDhD1YhMCwSAQEBiImNZRJMRERuQeHqACoycOBAx8/t27dH165dERMTg6VLl0Kj0dTacVUqFVQqVa3t/2bZe4Bbhvm6OBJqyMxmEyCseGXBSvgHBjttM5qt+OHAZeQHRKLXtF9wR4QMbw/tC6PRWKv/7xIREVWGW/cAX8/f3x8tWrTAyZMnER4ejpKSEuTm5jq1ycjIQHh4OAAgPDy81KgQ9sf2NvXR8Qz2AJP7UGt10Oh8nRZ/f38Mah8JmQSczjbiuIGlOkRE5D7qVQKcn5+PU6dOISIiAp07d4aXlxfWrVvn2H7s2DGcPXsWCQkJAICEhAQcOHAAmZmZjjbJycnw9fVFfHx8ncdfEyxWwQSY6oUIPw16tAgBAPx1Lh+aZl1dHBEREZGNWyfAL7/8MjZt2oSUlBRs3boVDzzwAORyOR577DH4+flh5MiRGD9+PDZs2IDdu3djxIgRSEhIwO233w4A6N+/P+Lj4zFkyBDs27cPq1evxsSJEzF69Gi3LnGoSOrlAhjNVqi9ZGgcyCHQyL11iPJH+0Z+AIDge17GsYwCF0dERETk5jXA58+fx2OPPYbLly8jJCQEd955J7Zv346QEFuv0uzZsyGTyTB48GAYjUYkJibik08+cTxfLpfjt99+w6hRo5CQkABvb28MGzYMU6dOddUp3TR772/zUB/IZZKLoyG6sR4tQnA5rwgXDMCYZYex7Hl/xAZz+D4iInIdt06Av/322wq3q9VqzJ07F3Pnzi23TUxMDH7//feaDs1ljnIECKpn5DIJ/Zr74b+rdiELMXj8v9vx3XMJiOZfMIiIyEXcugSCSrP3ALdiAkz1iEohQ8Z3byA2UIOL+mI8vmA7p0smIiKXYQJcz9h7gFuEMQGm+sVakItPH2uDmCAtzmUXYfC8rTh0Ue/qsIiIqAFiAlyPFJssSLlku4mIPcBUH4X5qPDNM7ejSYg30vTFeGj+Nqw9nHHjJxIREdUgJsD1yMnMfFgF4K/1QohP/RzFgho2vV4Pbxix6Im26Brjh8ISC575chfe+XU/si5nc9pkIiKqE259Exw5O+aYAc4HksQRIKj+uHbaZAeZHIH9nofPLQPx2ZZz+OiHDbi8YhZMl84iJDQUqSkpnDWOiIhqBRPgeoQ3wFF9VdG0yacuF+PPFAMQ3gxRT3+CVkEKrJ44mNMmExFRrWEJRD3iuAGOCTDVU2VNm9w2JhRDbo9FbJAWVgEcvmRG5HMLsGjHeeQVm1wdMhEReSAmwPWEEAL7z+cCAOIjfF0bDFEN81YpcG+HSNzbIRIBGgXkGh98sCEVCdPXY+qvh5F6mTPIERFRzWECXE+cuVSAnEITlAoZ2kT6uTocohonSRLigr0xuF0gLq2YjSZBGuQbzfhiyxn0fG8jHv50G77beRb6IvYKExHRzWENcD3x99lcAED7Rn5QKvi9hTyXTJJQcHAdPn9oAQ5nCyzZeRHbzuTirzPZ+OtMNt746SA6N/ZF7+ZB6NksELGhvqwVJiKiKmECXE/sTs0BAHSOCXBxJES1yz5iRJO4OMc6uU8QvON7w7ttbyA4BjtS9NiRosd/kk/DejkVLzzYC73jw9E+yh9ecn5BJCKiijEBrif+vpIAd2ICTB6uohEjACC3yIzUHCNScozIyDdBFhSDjzedwcebzkDjJUeX2ADc3iQICU2D0K6RHxNiIiIqhQlwPWAoNuF4pm0EiE6NmQBTw2AfMeJ6Gh0QEQLcDiA7Jxez33oDj46bht3nDMgpNOGPE5fwx4lLtn142Wrm2zW6skT5IVInh9lUUqkYVCoVyyuIiDwQE+B6YO/ZXAgBNA7UcgY4omtovGQoOLAW7z+wDL6+fjiemYftpy5j++lsbD9zGbmFJuxOzXGUEAGAMBlRknkGJVkpMGWloCQrFaasFFiL80rtnxNyEBF5JibA9QDrf4luTCaT0CrcF63CfTG8WxysVoEzlwtw4LweBy7or/ybiyKooGrUCqpGrZyer/WSIVCrQKBGgUCtAlqpBPP/OajSE3IUFRXBaDRWOl72LhMRuQ4T4Hrg77NX6n8b+7s2EKJ6RCaT0DREh6YhOtx/SyMAwOXsHIS3aI+h//kfDGYZLueX4FK+EYZiMwpNVhTqS3Bef7U8InrcMtz/2d+Ib+SHFmE+aBXug5bhvmgcqIVcdnU68qKiIsTExiIrM7PS8bF3mYjIdZgAuzmLVWDvlSHQeAMcUdn0en2l2uXnGWC+fB5Ng9RO9cUlZisuFxgdCfHl/BJk5RfDaJYjJbsIKdlF+P1AuqO92kuGdo380DUuCLfFBaKpn4SszExM/Go9NN43nqmxqCAPbw3pw+meiYhchAmwmzuRmYc8oxneSjlahnEKZKJr2YdMi42NrdLzzGbnyTSUChki/DSI8LuajBbm6fHm0ET88sduXMgTOJqeh2MZBpzIyEexyYqdKTnYmZIDbADkEhA+ZBb2XQKaeSnQyF8D2TU9xERE5F6YALs5e/1vh2h/KDicE5GTGw2Zdr2czDS8//y9MJstN2wrSRIsBTloEyjDHXF+QPtAALa/ypzNKcK+83nYfc6A3ef0uKg3QhXZAvvTC7E/vRAqhQxxwd5oEuKNmEBvTl5DRORmmAC7ub/OZAPg8GdEFSlvyLTrFRWUHumhPFXpXZb7hEAd3QYJw/+N8wYLikwWHE3Pw9H0PMhlEhoHatEq3AdNgr35RZaIyA0wAXZjZosVG49lAQB6tAhxcTREDUtVepftPcsJUdPgFxSCtNxinL6Uj1NZBdAXmXDmUgHOXCqAUi5D8zAd4vzkAFgiQUTkKkyA3djOlBzoi0wI0HpxCDQiF6lM7/K1PcsySUKjAA0aBWhwZ7NgXC4owfEMW29wXrEZhy4acOgi0Oj5BZi7ORVPdvNCTJB3bZ8GERFdgwmwG1t7JAMA0KdVmNOQS0RUP0iShGCdCsE6FRKaBOFCbhGOpufheEYe4BeG/249j/9uPY+ucYF4uEs0BrYLh1bJj2UiotrGYjQ3JYRwJMB3xYe6OBoiulmSJCEqQIt+rcMwpFMIsn6ZgTvi/CFJwI4z2Xhp2T7c9vY6vP7DfuxOzYYQwtUhExF5LHY1uKmTmflIvVwIpUKG7s1Z/0vkSRQyCYVHNmP6gCgUSc3w68FM/LI/E+dyi/HtznP4duc5xAZqcG+7UCS2DkaTMD+OF0xEVIOYALupNYdtvb/dmgbBW8WXiciTlDfChCqqDXTt74K25Z1IyQY+3JSKDzelwpJ1GhMe74/7OjdGI38mwkREN4uZlZuylz/0iw9zcSREVNNuNMJEicWK05eNOHm5CGkGE+QhTTAj+SRmJJ/ELY39kdgmHHc2C0Z8hC8n3CAiqgYmwG4oM68Ye8/lAgD6tmICTOSpyhthQgPgFj/glibA5ZwczJk+BYnPTMDucwbsOZuLPVemR/fXeiGhSRDuaBaMbk2DEBfsDUliQkxEdCNMgN3QhqOZEAJoH+WHcD+1q8MhIhfSesmRv3clFjz+DUrkaqw6mI7Nx7Ow/XQ2cgtNWHkwHSsPpgMAAr2VaBOhQ+tQLeIjdIgP1yHUR1XuvlUqFWuLiahBYgLshvKKzfBVK3BXa/b+EpGNXq+Hnx9wb2t/3NvaH2arwKG0PPyVosf2lFzsu5CH7IIS/HEyG3+czHY8z5x3GaasMyjJtC2mrBSYLp8HhBUhoaFITUlhEkxEDQ4TYDf0dPcmGHZHLErMVleHQkQuVukpmeVeUIbGQRneDLc+NAa5JTLkFJmh8AmCwicImiZdrjaVAD+VhLN/rcHnf55BpyahiI/whb9WWbsnQ0TkJpgAuykvuQxecg7TTNTQVWdK5jtfmYCA4FCYLFZcyjfiUl4JsvKNtp/zjTBZBLKLBXTt78L7684A684AACL81GgV7oPWEb6OJS7YmxPxEJHHYQLsxoqKimA0Gm/YTq/X10E0RORKVZ2SGbB9kY7w0yDC72qJgxAC+iITLl7KxbKF8/DAiDE4ebkI57KLkKYvRpq+GBuOZTnaqxQyNA/TISbIG40DtYgJ1KJxoBbRgVpE+KmhKOeLemU/vwDWIhNR3WMC7KaKiooQExuLrMzMSj/HbDbVYkRE5AkkSYK/VglVoBr6Ld9g8pJ34Ofnh3yjGSeyCnE8s8CxnMgqRLHJioMXDDh4wVDGvoAgbxXCfFUI9VEhzFeNUF81AtQy/HvcaGRfOANLoR7WIj2EqfxkmLXIRFTXmAC7KaPRiKzMTEz8aj003j4VtrX/2dNsttRRdERU31WqtliSQeEfDq/gxlD4h8MnPA49Bj6AtDwTLuiLYbIIR1nFoeuequr3AiKueSyXARqFDGovmeNftUIGuTBh3aKZWHXgIqJDA+CvVSLQWwk/jRdLL4io1jABdnMab58q/9mTiOhGqlJbDACGnEt49+kkfPvr7CtrJMi0fpDrAiHXBUJx5V/H4h2IwJhWKLYIWKwCFiuQX2JFfknpm3uDBr6AcT8edVonAfBRK+CvUcBf4wW/K/8G6VQI8dMi0FuJEJ0Kob4qhPioEKxT8b4JIqo0JsBERA1YZWqLgStftKt4M94z3/wB/6AQmCwCRSYLikosKDSZUVRicTw25Bdg/86tkGt8IdP4Qq7xgUytgwBgKDbDUGzG2ZziSp1LgEaBIJ0Swd5KBHt7IVinRJifBpGBOoT6qBHiY0uYfVQKThhC1MAxASYiokqr6s14kiRBqZCgVMjgp/Eq1TY7owTrvp/ilFhbrQLFFiuMJoFisxVGsxXFZiv0efnYvOIHyDU6yLT+kHv723qbtf6Q5ArkFJmRU2TGyazCCuNTKWS2nmOdrfc41EeNYJ0KQTolgryVCLrmZ1+1F6ebJvJATICJiMjlrk+svctok51xAb9s/KJUL7QQAkazQKHJgkKTFYUlVhSarDAUFmP3H+vQrd8g5BZbcamgBPlGC4xmK85l20a+uBGFTIK/RoFArRdCfJQI0dmWyABvRAX5IMzXdvNfsE7FmmWieoQJMBER1Stl9UJrAQRc185wOROrf5uJn399z7FOUqgg9/aHzDsAcl0A5N4BV3qR/SD3DrCVYWj9INf6QabWwWwVuFRgwqUCE45X0LMsk4AQ+0gYPmqE+aoQ7qu+MjKGbX2YrxoBWi+WXxC5ASbARETkkaozici1bS1WWwlGkcm2FJqsKCixwFBoxN7tf6DTnX2QXWTB5fwSWASQYTAiw2AEUP7Y7F5yCSFX6pR1Kjm8VXLolHJ4qxTwVsqhUcqgkGwlI15yGZRyCQq5DF5y6coig0ImQSGTIJdJ0KpV0Gk1kMts2xXXbLc/Ty6T4CWTwWgsrvTYzEDVxmfmuM9U3zABJiIij1aVuuXr2+rKaGu4nInk16dj9U9v21ZIMluvsS4Qcl0Q5D5B14yOceVnnyDItX4wWQQu6o24qK98IlpThNUKWC0QVjOE1WL72WK+ss4COK23QCGX0PW2W6HykkMhu5JY2xNymQS5zJZgQ1jx1ZeLUZSfB2G9uj9hKoHVVAxhKoIoKbb9XFIMPx8NNiavRpCvN7QqBbRectZZU51jAkxERFQFVR1Czt67PP6z36H0CURhiQVFJitKLAIlFgGTRaDEYntcWFiIw39tRotbe0LupYTFCliFgFXYeqQt4upjq9UKffYlBIeEwiIAs9U25JzZatt+PUkmA2QySCh9M2J5dqXmVqqdV3y/KuwVGPjxdqfHaoUMGqUcWi/7v7becJ3KCz4aJbSOHnLbv/bEWaOUA7h6TUqMRhhNJggBiCvXSghAABAQjvUCAnK5AgovW9Re8is97gpbr7uXXAaNlxw6tQI+ai/oVAr4qBVQe8mrcJbkzhpUAjx37ly89957SE9PR4cOHfDRRx/htttuc3VYRERUD1VpCDkA3jofBARdX6nsLDvjAjb/33sY9di9CAgOrbCt4XImJj9+Dy6I0mMrAxIgk0OSywGZApJMDkkmx/hPf4HWJwBWq4DlSnJoEQJW6zU/C4ECfS6+mTXRljRLtv1IMoVtnzI5IFdAkuTAlfWSTIY7HxgOhVLtSEbNVitMFgGTxQqT2faz0WRC9uUsyLw0kLxUtn0BKL4y0kfODa+ma3nJJeiUcuhUClv5isr2s49KAZ1KDp8rj/11agT7aqFVyqFUyKBSyKCUy6+UtthKXJQKGVRyOWQyQCZJkKSr/0qQILv2MevGa1yDSYC/++47jB8/HvPnz0fXrl3xwQcfIDExEceOHUNoaMUfMkRERO6mOjXOahnKHI7uetnmXBQd31qlfd8y6jkEBIdUvN+MC3hr6jC8smAl/AKCYBG4kiTbeq5NFitMVgGzRaCgqAi/LJiF/5vyFoTc68oIH5Yr40hbUWiyoNhkhQTbtNwWiwXbtm5FXJtbIJcrriSSAOz/wpZYQgLMJUYc/3srbH3DsH1BkHtBkitsyb3MC5JSBZlSC5nKGzKVFoAtVvtwe3XNnhBf+7MtObadlz1Htl0PWwJtO3/JcY3s/wKS47F9n1e3S07Xzb5/hVyC+koyb5vJUQ611zWPveTwVtoW3ZUvB95KBQJ8NGjVKBA6lXulnO4VTS2aNWsWnnnmGYwYMQIAMH/+fKxYsQJffPEFXn/9dRdHR0REVD1VHZvZHfat1uqg9fGrsI3hciby96/Ba/evqtK+Ry/dCh//oArbZGdcwNZJ71Qhwb8HL366AlrfwCulK1dKWMxXS1lKLFaUmAUKiopxZO9fkCm1tl5uhdeV5PrKYn+sUFbpvKxXSjquKqPOxU199kQH9G8X5eownDSIBLikpAS7d+/GhAkTHOtkMhn69euHbdu2lWpvNBqd7mbV62139BoMhtoP9gr7sXIvpaO4ML/CtvpLmbZ/L2cA1oq/ldZWW3eJoz7G7C5xMOaGFQdjblhx1MeYc7MyAGHFc+8uhq9/xaUj9n1+9u9ncDnjIswlFd9kaI/DWFSA4kJ1hW2NRYUABERJIRQWDRQAtHIAcgBOOawEQEJuVh42fz/lhnELYUGePgef/vuZK0+XAOnKdN6SzFb2UOqxhGGTPoRG63OlrtlW03w9Q+5lLJs9CQ+9NB06H9sXGOH4j3PqLADk67Px0ydv44Exb8Jb53N1u7ja1ioAswDyDXqsW/YFuj/0LJRqDcwCsFhtNeomK2yLxVaTXmKxIicnG9aiuDrJoezHEGVdlOtIojKt6rmLFy+iUaNG2Lp1KxISEhzrX331VWzatAk7duxwaj958mRMmTKlrsMkIiIiopt07tw5REVV3OPcIHqAq2rChAkYP36847HVakV2djaCgoJuqhDdYDAgOjoa586dg6/vjW+coJrF6+86vPauxevvWrz+rsXr71p1ef2FEMjLy0NkZOQN2zaIBDg4OBhyuRwZGRlO6zMyMhAeHl6qvUqlgkqlclrn7+9fY/H4+vryf0IX4vV3HV571+L1dy1ef9fi9Xeturr+fn4V15bbyWo5DregVCrRuXNnrFu3zrHOarVi3bp1TiURREREROT5GkQPMACMHz8ew4YNQ5cuXXDbbbfhgw8+QEFBgWNUCCIiIiJqGBpMAvzII48gKysLkyZNQnp6Ojp27IhVq1YhLCyszmJQqVR48803S5VXUN3g9XcdXnvX4vV3LV5/1+L1dy13vf4NYhQIIiIiIiK7BlEDTERERERkxwSYiIiIiBoUJsBERERE1KAwASYiIiKiBoUJcA2bO3cuYmNjoVar0bVrV/z1118Vtl+2bBlatWoFtVqNdu3a4ffff6+jSD1TVa7/okWLIEmS06JWVzwnPJVt8+bNuOeeexAZGQlJkrB8+fIbPmfjxo3o1KkTVCoVmjVrhkWLFtV6nJ6qqtd/48aNpd77kiQhPT29bgL2INOnT8ett94KHx8fhIaG4v7778exY8du+Dx+9teM6lx/fvbXnHnz5qF9+/aOSS4SEhKwcuXKCp/jLu99JsA16LvvvsP48ePx5ptv4u+//0aHDh2QmJiIzMzMMttv3boVjz32GEaOHIk9e/bg/vvvx/3334+DBw/WceSeoarXH7DNTJOWluZYUlNT6zBiz1FQUIAOHTpg7ty5lWp/5swZJCUloXfv3ti7dy/Gjh2Lp59+GqtXr67lSD1TVa+/3bFjx5ze/6GhobUUoefatGkTRo8eje3btyM5ORkmkwn9+/dHQUFBuc/hZ3/Nqc71B/jZX1OioqLwn//8B7t378auXbvQp08f3HfffTh06FCZ7d3qvS+oxtx2221i9OjRjscWi0VERkaK6dOnl9n+4YcfFklJSU7runbtKp577rlajdNTVfX6L1y4UPj5+dVRdA0HAPHTTz9V2ObVV18Vbdq0cVr3yCOPiMTExFqMrGGozPXfsGGDACBycnLqJKaGJDMzUwAQmzZtKrcNP/trT2WuPz/7a1dAQIBYsGBBmdvc6b3PHuAaUlJSgt27d6Nfv36OdTKZDP369cO2bdvKfM62bduc2gNAYmJiue2pfNW5/gCQn5+PmJgYREdHV/itlWoW3/vuoWPHjoiIiMBdd92FLVu2uDocj6DX6wEAgYGB5bbh+7/2VOb6A/zsrw0WiwXffvstCgoKkJCQUGYbd3rvMwGuIZcuXYLFYik1s1xYWFi5dXXp6elVak/lq871b9myJb744gv8/PPP+Prrr2G1WnHHHXfg/PnzdRFyg1bee99gMKCoqMhFUTUcERERmD9/Pn744Qf88MMPiI6ORq9evfD333+7OrR6zWq1YuzYsejWrRvatm1bbjt+9teOyl5/fvbXrAMHDkCn00GlUuH555/HTz/9hPj4+DLbutN7v8FMhUx0vYSEBKdvqXfccQdat26NTz/9FNOmTXNhZES1q2XLlmjZsqXj8R133IFTp05h9uzZ+Oqrr1wYWf02evRoHDx4EH/++aerQ2mQKnv9+dlfs1q2bIm9e/dCr9fj+++/x7Bhw7Bp06Zyk2B3wR7gGhIcHAy5XI6MjAyn9RkZGQgPDy/zOeHh4VVqT+WrzvW/npeXF2655RacPHmyNkKka5T33vf19YVGo3FRVA3bbbfdxvf+TRgzZgx+++03bNiwAVFRURW25Wd/zavK9b8eP/tvjlKpRLNmzdC5c2dMnz4dHTp0wJw5c8ps607vfSbANUSpVKJz585Yt26dY53VasW6devKrYVJSEhwag8AycnJ5ban8lXn+l/PYrHgwIEDiIiIqK0w6Qq+993P3r17+d6vBiEExowZg59++gnr169HXFzcDZ/D93/Nqc71vx4/+2uW1WqF0Wgsc5tbvffr/LY7D/btt98KlUolFi1aJA4fPiyeffZZ4e/vL9LT04UQQgwZMkS8/vrrjvZbtmwRCoVCvP/+++LIkSPizTffFF5eXuLAgQOuOoV6rarXf8qUKWL16tXi1KlTYvfu3eLRRx8VarVaHDp0yFWnUG/l5eWJPXv2iD179ggAYtasWWLPnj0iNTVVCCHE66+/LoYMGeJof/r0aaHVasUrr7wijhw5IubOnSvkcrlYtWqVq06hXqvq9Z89e7ZYvny5OHHihDhw4IB48cUXhUwmE2vXrnXVKdRbo0aNEn5+fmLjxo0iLS3NsRQWFjra8LO/9lTn+vOzv+a8/vrrYtOmTeLMmTNi//794vXXXxeSJIk1a9YIIdz7vc8EuIZ99NFHonHjxkKpVIrbbrtNbN++3bGtZ8+eYtiwYU7tly5dKlq0aCGUSqVo06aNWLFiRR1H7Fmqcv3Hjh3raBsWFiYGDRok/v77bxdEXf/Zh9W6frFf72HDhomePXuWek7Hjh2FUqkUTZo0EQsXLqzzuD1FVa//u+++K5o2bSrUarUIDAwUvXr1EuvXr3dN8PVcWdcdgNP7mZ/9tac615+f/TXnqaeeEjExMUKpVIqQkBDRt29fR/IrhHu/9yUhhKi7/mYiIiIiItdiDTARERERNShMgImIiIioQWECTEREREQNChNgIiIiImpQmAATERERUYPCBJiIiIiIGhQmwERERETUoDABJiIiIqI6sXnzZtxzzz2IjIyEJElYvnx5lfchhMD777+PFi1aQKVSoVGjRnj77bertA8mwEREtSA9PR133XUXvL294e/v7+pwKq26v5CqYtGiRS67Jr169cLYsWNdcmwiAgoKCtChQwfMnTu32vt48cUXsWDBArz//vs4evQofvnlF9x2221V2gcTYCKq1yRJqnCZPHmyS+KaPXs20tLSsHfvXhw/ftwlMdSGrKwsjBo1Co0bN4ZKpUJ4eDgSExOxZcuWOo1j8uTJjtdYoVAgNjYW48aNQ35+foXP+/HHHzFt2rQ6ipKIrjdw4EC89dZbeOCBB8rcbjQa8fLLL6NRo0bw9vZG165dsXHjRsf2I0eOYN68efj5559x7733Ii4uDp07d8Zdd91VpTgUN3MSRESulpaW5vj5u+++w6RJk3Ds2DHHOp1O5/hZCAGLxQKFovY/+k6dOoXOnTujefPm1d5HSUkJlEplDUZ18wYPHoySkhIsXrwYTZo0QUZGBtatW4fLly/XeSxt2rTB2rVrYTabsWXLFjz11FMoLCzEp59+Wqqt/VoGBgbWeZxEVHljxozB4cOH8e233yIyMhI//fQTBgwYgAMHDqB58+b49ddf0aRJE/z2228YMGAAhBDo168fZsyYUbX/vwURkYdYuHCh8PPzczzesGGDACB+//130alTJ+Hl5SU2bNggTp48Ke69914RGhoqvL29RZcuXURycrLTvmJiYsTbb78tRowYIXQ6nYiOjhaffvqpY7vRaBSjR48W4eHhQqVSicaNG4t33nnH8VwAjmXYsGFCCCFSU1PFvffeK7y9vYWPj4946KGHRHp6umOfb775pujQoYP473//K2JjY4UkSUIIIQCI+fPni6SkJKHRaESrVq3E1q1bxYkTJ0TPnj2FVqsVCQkJ4uTJk07nsHz5cnHLLbcIlUol4uLixOTJk4XJZHJsP378uOjevbtQqVSidevWYs2aNQKA+Omnn8q8vjk5OQKA2LhxY4Wvw8yZM0Xbtm2FVqsVUVFRYtSoUSIvL6/c16kysV7Pfq2u9cwzz4jw8PAKr2XPnj3Fiy++6HhOcXGxePXVV0VUVJRQKpWiadOmYsGCBY7tBw4cEAMGDBDe3t4iNDRUPPnkkyIrK6vC8yeiyrn+8yY1NVXI5XJx4cIFp3Z9+/YVEyZMEEII8dxzzwmVSiW6du0qNm/eLDZs2CA6duwoevfuXaVjswSCiDze66+/jv/85z84cuQI2rdvj/z8fAwaNAjr1q3Dnj17MGDAANxzzz04e/as0/NmzpyJLl26YM+ePfjnP/+JUaNGOXqXP/zwQ/zyyy9YunQpjh07hiVLliA2NhYAsHPnTgwYMAAPP/ww0tLSMGfOHFitVtx3333Izs7Gpk2bkJycjNOnT+ORRx5xOubJkyfxww8/4Mcff8TevXsd66dNm4ahQ4di7969aNWqFR5//HE899xzmDBhAnbt2gUhBMaMGeNo/8cff2Do0KF48cUXcfjwYXz66adYtGiR40YRq9WKBx98EEqlEjt27MD8+fPx2muvVXgddToddDodli9fDqPRWG47mUyGDz/8EIcOHcLixYuxfv16vPrqq+W2v1GslaXRaFBSUuJ4XN61vNbQoUPxv//9Dx9++CGOHDmCTz/91PFXg9zcXPTp0we33HILdu3ahVWrViEjIwMPP/xwleIioso5cOAALBYLWrRo4fi80el02LRpE06dOgXA9tllNBrx5Zdfonv37ujVqxc+//xzbNiwwemvfzd0s9k7EZG7KK8HePny5Td8bps2bcRHH33keBwTEyOefPJJx2Or1SpCQ0PFvHnzhBBC/Otf/xJ9+vQRVqu1zP3dd999jp5fIYRYs2aNkMvl4uzZs451hw4dEgDEX3/9JYSw9Vp6eXmJzMxMp30BEBMnTnQ83rZtmwAgPv/8c8e6//3vf0KtVjse9+3b19EjbffVV1+JiIgIIYQQq1evFgqFwqmnZeXKlRX2AAshxPfffy8CAgKEWq0Wd9xxh5gwYYLYt29fue2FEGLZsmUiKCjI8fj61+lGsZbl+h7gXbt2ieDgYPGPf/zDsb2sa3ltD/CxY8cEgFK9/3bTpk0T/fv3d1p37tw5AUAcO3as3NiIqHKu/7z59ttvhVwuF0ePHhUnTpxwWtLS0oQQQkyaNEkoFAqn/RQWFgoAYs2aNZU+NmuAicjjdenSxelxfn4+Jk+ejBUrViAtLQ1msxlFRUWleoDbt2/v+FmSJISHhyMzMxMAMHz4cNx1111o2bIlBgwYgLvvvhv9+/cvN4YjR44gOjoa0dHRjnXx8fHw9/fHkSNHcOuttwIAYmJiEBISUur518YSFhYGAGjXrp3TuuLiYhgMBvj6+mLfvn3YsmWLUy+qxWJBcXExCgsLHfFERkY6tickJJQbv93gwYORlJSEP/74A9u3b8fKlSsxY8YMLFiwAMOHDwcArF27FtOnT8fRo0dhMBhgNpsdx9VqtaX2eaNYy3oOYOst0ul0sFgsKCkpQVJSEj7++GPH9vKupd3evXshl8vRs2fPMrfv27cPGzZscKojtzt16hRatGhR7r6JqOpuueUWWCwWZGZmonv37mW26datG8xmM06dOoWmTZsC/9/e/YU01cdxHH+fpaGYkqOL9KJElpU4xZElXayCsyzaCGIpITSZepESREU3sWJghNam6EVCgd4EWmn0h4L+XAQNulAoiEAQnEgIRRGxCPqzngtpPD1On8x84Ol8Xne/nZ3f+Z6Nsc85+/1+g9RE47Vr1/70sRSAReSPl5OT80P7+PHj3L9/n/Pnz+NwOMjOzsbv9//w8zlAZmbmD23DMEgmkwC4XC4mJia4e/cuDx48oLa2FtM0uXbt2m+tNV0thmHM+dj3+hKJBOFwmH379s3qKysra1E1ZmVl4fF48Hg8hEIhmpqaOH36NA0NDcTjcbxeL4cOHeLMmTPY7XYeP35MY2Mjnz59Shtmf7XW9evXc/PmTTIyMigsLJw1YXCu1/K77OzsebcnEgl8Ph/t7e2zthUUFMy7r4ikl0gkGB8fT7UnJiZ4+vQpdrudkpIS6uvrOXjwIJFIhMrKSl6/fs3Dhw8pLy9nz549mKaJy+UiGAzS1dVFMpmktbUVj8ezoItSBWARsZxYLEZDQ0NqGZ5EIkE8Hl9wP3l5edTV1VFXV4ff72fXrl28ffs27UzkjRs3MjU1xdTUVOou8IsXL3j37h2lpaWLOp90XC4XY2NjOByOtNu/1zM9PZ0Kc0+ePPmlY5WWlqbWDh4dHSWZTBKJRLDZZqaZXLlyZVG1zmX58uUL3ufvnE4nyWSSR48eYZpm2rqGhoYoKir6T1YOEbGCkZERduzYkWofPXoUgEAgQH9/P319fbS1tXHs2DFevnzJqlWrqK6uxuv1AjNzDG7dusXhw4dxu93k5OSwe/duIpHIgurQJ1pELGfdunUMDw/j8/kwDINQKJS6c/qzotEoBQUFVFZWYrPZuHr1KqtXr57zDx5M08TpdFJfX09XVxdfvnyhpaWFbdu2zRqi8TucOnUKr9fLmjVr8Pv92Gw2nj17xvPnz2lra8M0TUpKSggEApw7d473799z8uTJeft88+YN+/fvJxgMUl5eTm5uLiMjI3R0dLB3714AHA4Hnz9/pqenB5/PRywWo7e3d1G1LpWioiICgQDBYJDu7m4qKiqYnJzk1atX1NbW0traysWLFzlw4AAnTpzAbrczPj7OwMAAly5dYtmyZUtWm8ifavv27cwM/00vMzOTcDhMOBye8zmFhYUMDQ0tqg6tAiEilhONRsnPz2fr1q34fD5qampwuVwL6iM3N5eOjg42bdpEVVUV8XicO3fupO56/pNhGNy4cYP8/HzcbjemaVJcXMzg4ODvOKVZampquH37Nvfu3aOqqorq6mo6OztTY+RsNhvXr1/n48ePbN68maampn9ddWHFihVs2bKFzs5O3G43ZWVlhEIhmpubU2NvKyoqiEajtLe3U1ZWxuXLlzl79uyial1KFy5cwO/309LSwoYNG2hububDhw/AzJdsLBbj69ev7Ny5E6fTyZEjR1i5cuWc77OI/D8Y3+aL4SIiIiIifxhdwoqIiIiIpSgAi4iIiIilKACLiIiIiKUoAIuIiIiIpSgAi4iIiIilKACLiIiIiKUoAIuIiIiIpSgAi4iIiIilKACLiIiIiKUoAIuIiIiIpSgAi4iIiIil/AXc2Sqiej5FsQAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["y train (before log transform): 2.0903923439032117\n","y val (before log transform): 2.103845192152696\n"]}]},{"cell_type":"code","source":["# Log transform\n","y_train_log = np.log1p(y_train)\n","y_val_log = np.log1p(y_val)\n","\n","plt.figure(figsize=(8, 5))\n","# sns.histplot(y_train_log, bins=50, density=True, alpha=0.7)\n","sns.histplot(y_train_log, kde=True, bins=50)\n","plt.title(\"Distribution of log1p(sale_price) on Training Set\")\n","plt.xlabel(\"log1p(sale_price)\")\n","plt.ylabel(\"Density\")\n","plt.show()\n","\n","\n","plt.figure(figsize=(8, 5))\n","# sns.histplot(y_train_log, bins=50, density=True, alpha=0.7)\n","sns.histplot(y_val_log, kde=True, bins=50)\n","plt.title(\"Distribution of log1p(sale_price) on Training Set\")\n","plt.xlabel(\"log1p(sale_price)\")\n","plt.ylabel(\"Density\")\n","plt.show()\n","\n","\n","print(\"Skewness of original y_train:\", y_train.skew())\n","print(\"Skewness of original y_val:\", y_val.skew())\n","print(\"Skewness of log-transformed y_train:\", pd.Series(y_train_log).skew())\n","print(\"Skewness of log-transformed y_train:\", pd.Series(y_val_log).skew())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"uMnB3uDghffu","executionInfo":{"status":"ok","timestamp":1754372618330,"user_tz":-420,"elapsed":2403,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"cd3227bf-0f2b-4b4a-a847-753e60cec2c4"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Skewness of original y_train: 2.0903923439032117\n","Skewness of original y_val: 2.103845192152696\n","Skewness of log-transformed y_train: 0.26960535299334143\n","Skewness of log-transformed y_train: 0.2712616150231545\n"]}]},{"cell_type":"code","source":["# Identify numeric & categorical columns\n","numeric_features = X_train.select_dtypes(include=np.number).columns.tolist()\n","categorical_features = X_train.select_dtypes(exclude=np.number).columns.tolist()\n"],"metadata":{"id":"Yu4MMFMjwWmN","executionInfo":{"status":"ok","timestamp":1754372618341,"user_tz":-420,"elapsed":8,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# Quick check\n","print(\"Categorical cardinalities:\")\n","for col in categorical_features:\n","    nunique = X_train[col].nunique()\n","    print(f\"  {col}: {nunique} unique values\")\n","    # If cardinality is huge (say > 30), consider target encoding or frequency encoding instead."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MLY4VDr0wjUL","executionInfo":{"status":"ok","timestamp":1754372618452,"user_tz":-420,"elapsed":106,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"53e96bf6-18ca-4d3b-8077-c9c43486fb44"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Categorical cardinalities:\n","  sale_date: 313 unique values\n","  sale_warning: 131 unique values\n","  join_status: 8 unique values\n","  city: 41 unique values\n","  zoning: 490 unique values\n","  subdivision: 10254 unique values\n","  submarket: 19 unique values\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler, OrdinalEncoder\n","from sklearn.compose import ColumnTransformer\n","\n","numeric_transformer = StandardScaler()\n","categorical_transformer = OrdinalEncoder(\n","    handle_unknown='use_encoded_value', unknown_value=-1\n",")\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numeric_transformer, numeric_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ], remainder='drop')"],"metadata":{"id":"aSexhWe9xFpC","executionInfo":{"status":"ok","timestamp":1754372618475,"user_tz":-420,"elapsed":9,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["MODELING Ridge"],"metadata":{"id":"pLjwXjmV1zQ8"}},{"cell_type":"code","source":["lgbm = LGBMRegressor(\n","    n_estimators=1000,\n","    learning_rate=0.05,\n","    num_leaves=31,\n","    random_state=42,\n","    verbosity=-1\n",")"],"metadata":{"id":"q_w050Bd1Q2w","executionInfo":{"status":"ok","timestamp":1754372618523,"user_tz":-420,"elapsed":45,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["pipeline = Pipeline([\n","    (\"preprocessor\", preprocessor),\n","    (\"regressor\", lgbm)\n","])"],"metadata":{"id":"cn-Qf0cwG85N","executionInfo":{"status":"ok","timestamp":1754372618524,"user_tz":-420,"elapsed":10,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# === 8. Fit on training (log target) ===\n","pipeline.fit(X_train, y_train_log)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":252},"id":"_mpVeawPHDGG","executionInfo":{"status":"ok","timestamp":1754372648012,"user_tz":-420,"elapsed":29495,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"a82110c0-c698-4057-b44f-9cd826bad310"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('preprocessor',\n","                 ColumnTransformer(transformers=[('num', StandardScaler(),\n","                                                  ['id', 'sale_nbr',\n","                                                   'join_year', 'latitude',\n","                                                   'longitude', 'area',\n","                                                   'present_use', 'land_val',\n","                                                   'imp_val', 'year_built',\n","                                                   'year_reno', 'sqft_lot',\n","                                                   'sqft', 'sqft_1',\n","                                                   'sqft_fbsmt', 'grade',\n","                                                   'fbsmt_grade', 'condition',\n","                                                   'stories', 'beds',\n","                                                   'bath_full', 'bath_3qtr',\n","                                                   'bath_half', 'garb_sqft',\n","                                                   'gara_sqft', 'wfnt', 'golf',\n","                                                   'greenbelt', 'noise_traffic',\n","                                                   'view_rainier', ...]),\n","                                                 ('cat',\n","                                                  OrdinalEncoder(handle_unknown='use_encoded_value',\n","                                                                 unknown_value=-1),\n","                                                  ['sale_date', 'sale_warning',\n","                                                   'join_status', 'city',\n","                                                   'zoning', 'subdivision',\n","                                                   'submarket'])])),\n","                ('regressor',\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                                  [&#x27;id&#x27;, &#x27;sale_nbr&#x27;,\n","                                                   &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                                   &#x27;longitude&#x27;, &#x27;area&#x27;,\n","                                                   &#x27;present_use&#x27;, &#x27;land_val&#x27;,\n","                                                   &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                                   &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;,\n","                                                   &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                                   &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;,\n","                                                   &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;,\n","                                                   &#x27;stories&#x27;, &#x27;beds&#x27;,\n","                                                   &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;,\n","                                                   &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                                   &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;,\n","                                                   &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;,\n","                                                   &#x27;view_rainier&#x27;, ...]),\n","                                                 (&#x27;cat&#x27;,\n","                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                 unknown_value=-1),\n","                                                  [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;,\n","                                                   &#x27;join_status&#x27;, &#x27;city&#x27;,\n","                                                   &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                                   &#x27;submarket&#x27;])])),\n","                (&#x27;regressor&#x27;,\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                                  [&#x27;id&#x27;, &#x27;sale_nbr&#x27;,\n","                                                   &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                                   &#x27;longitude&#x27;, &#x27;area&#x27;,\n","                                                   &#x27;present_use&#x27;, &#x27;land_val&#x27;,\n","                                                   &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                                   &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;,\n","                                                   &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                                   &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;,\n","                                                   &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;,\n","                                                   &#x27;stories&#x27;, &#x27;beds&#x27;,\n","                                                   &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;,\n","                                                   &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                                   &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;,\n","                                                   &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;,\n","                                                   &#x27;view_rainier&#x27;, ...]),\n","                                                 (&#x27;cat&#x27;,\n","                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                 unknown_value=-1),\n","                                                  [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;,\n","                                                   &#x27;join_status&#x27;, &#x27;city&#x27;,\n","                                                   &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                                   &#x27;submarket&#x27;])])),\n","                (&#x27;regressor&#x27;,\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>preprocessor: ColumnTransformer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                 [&#x27;id&#x27;, &#x27;sale_nbr&#x27;, &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                  &#x27;longitude&#x27;, &#x27;area&#x27;, &#x27;present_use&#x27;,\n","                                  &#x27;land_val&#x27;, &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                  &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;, &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                  &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;, &#x27;fbsmt_grade&#x27;,\n","                                  &#x27;condition&#x27;, &#x27;stories&#x27;, &#x27;beds&#x27;, &#x27;bath_full&#x27;,\n","                                  &#x27;bath_3qtr&#x27;, &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                  &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;, &#x27;greenbelt&#x27;,\n","                                  &#x27;noise_traffic&#x27;, &#x27;view_rainier&#x27;, ...]),\n","                                (&#x27;cat&#x27;,\n","                                 OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                unknown_value=-1),\n","                                 [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;, &#x27;join_status&#x27;,\n","                                  &#x27;city&#x27;, &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                  &#x27;submarket&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>num</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;id&#x27;, &#x27;sale_nbr&#x27;, &#x27;join_year&#x27;, &#x27;latitude&#x27;, &#x27;longitude&#x27;, &#x27;area&#x27;, &#x27;present_use&#x27;, &#x27;land_val&#x27;, &#x27;imp_val&#x27;, &#x27;year_built&#x27;, &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;, &#x27;sqft&#x27;, &#x27;sqft_1&#x27;, &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;, &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;, &#x27;stories&#x27;, &#x27;beds&#x27;, &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;, &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;, &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;, &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;, &#x27;view_rainier&#x27;, &#x27;view_olympics&#x27;, &#x27;view_cascades&#x27;, &#x27;view_territorial&#x27;, &#x27;view_skyline&#x27;, &#x27;view_sound&#x27;, &#x27;view_lakewash&#x27;, &#x27;view_lakesamm&#x27;, &#x27;view_otherwater&#x27;, &#x27;view_other&#x27;, &#x27;years_since_reno&#x27;, &#x27;total_bathrooms&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>cat</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;, &#x27;join_status&#x27;, &#x27;city&#x27;, &#x27;zoning&#x27;, &#x27;subdivision&#x27;, &#x27;submarket&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>OrdinalEncoder</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LGBMRegressor</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>LGBMRegressor(learning_rate=0.05, n_estimators=1000, random_state=42,\n","              verbosity=-1)</pre></div> </div></div></div></div></div></div>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["y_val_log_pred = pipeline.predict(X_val)\n","\n","y_val_pred = inverse_log1p(y_val_log_pred)"],"metadata":{"id":"nMysLxQ-0Ae6","executionInfo":{"status":"ok","timestamp":1754372651416,"user_tz":-420,"elapsed":3415,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"13babf80-c4fc-4338-dd2f-e7ed3c8e78bf"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# RMSE manual (karena squared=False mungkin tidak tersedia)\n","mse_val = mean_squared_error(y_val, y_val_pred)\n","rmse_val = np.sqrt(mse_val)\n","r2_val = r2_score(y_val, y_val_pred)\n","print(f\"MSE : {mse_val:.4f}\")\n","print(f\"RMSE : {rmse_val:.4f}\")\n","print(f\"R2 : {r2_val:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-D7xGN-r1Qzb","executionInfo":{"status":"ok","timestamp":1754372651427,"user_tz":-420,"elapsed":10,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"6590265a-5f0f-4eec-beda-5b5c75e492ca"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE : 11238525862.1986\n","RMSE : 106011.9138\n","R2 : 0.9357\n"]}]},{"cell_type":"code","source":["kf = KFold(n_splits=5, shuffle=True, random_state=42)\n","nonconformity_scores = []\n","\n","for train_idx, cal_idx in kf.split(X_train):\n","    X_tr, X_cal = X_train.iloc[train_idx], X_train.iloc[cal_idx]\n","    y_tr_log = np.log1p(y_train.iloc[train_idx])\n","    y_cal = y_train.iloc[cal_idx]  # original scale\n","\n","    # Fit model on X_tr\n","    pipeline_fold = Pipeline([\n","        (\"preprocessor\", preprocessor),\n","        (\"regressor\", LGBMRegressor(\n","            n_estimators=1000,\n","            learning_rate=0.05,\n","            num_leaves=31,\n","            random_state=42,\n","            verbosity=-1\n","        ))\n","    ])\n","    pipeline_fold.fit(X_tr, y_tr_log)\n","\n","    # Predict calibration fold\n","    y_cal_log_pred = pipeline_fold.predict(X_cal)\n","    y_cal_pred = inverse_log1p(y_cal_log_pred)\n","\n","    # Nonconformity = |actual - predicted|\n","    residuals = np.abs(y_cal.values - y_cal_pred)\n","    nonconformity_scores.extend(residuals.tolist())\n","\n","# Choose quantile for desired coverage, e.g., 90% -> alpha = 0.1\n","coverage = 0.9\n","quantile_level = np.quantile(nonconformity_scores, coverage)\n","print(f\"Calibration nonconformity {coverage*100:.0f}% quantile (interval half-width): {quantile_level:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yhWkUtMd1QtM","executionInfo":{"status":"ok","timestamp":1754372783625,"user_tz":-420,"elapsed":132196,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"9e104e47-3cf4-4957-df35-537ad6ab3c3f"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["Calibration nonconformity 90% quantile (interval half-width): 132458.9303\n"]}]},{"cell_type":"code","source":["X_full = pd.concat([X_train, X_val], axis=0)\n","y_full = pd.concat([y_train, y_val], axis=0)\n","y_full_log = np.log1p(y_full)\n","\n","pipeline_final = Pipeline([\n","    (\"preprocessor\", preprocessor),\n","    (\"regressor\", LGBMRegressor(\n","        n_estimators=1000,\n","        learning_rate=0.05,\n","        num_leaves=31,\n","        random_state=42,\n","        verbosity=-1\n","    ))\n","])\n","pipeline_final.fit(X_full, y_full_log)"],"metadata":{"id":"KCqbnT-41Qqb","colab":{"base_uri":"https://localhost:8080/","height":252},"executionInfo":{"status":"ok","timestamp":1754372819869,"user_tz":-420,"elapsed":36246,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"1518bc84-29e0-4e1c-b996-4f7e970fa771"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(steps=[('preprocessor',\n","                 ColumnTransformer(transformers=[('num', StandardScaler(),\n","                                                  ['id', 'sale_nbr',\n","                                                   'join_year', 'latitude',\n","                                                   'longitude', 'area',\n","                                                   'present_use', 'land_val',\n","                                                   'imp_val', 'year_built',\n","                                                   'year_reno', 'sqft_lot',\n","                                                   'sqft', 'sqft_1',\n","                                                   'sqft_fbsmt', 'grade',\n","                                                   'fbsmt_grade', 'condition',\n","                                                   'stories', 'beds',\n","                                                   'bath_full', 'bath_3qtr',\n","                                                   'bath_half', 'garb_sqft',\n","                                                   'gara_sqft', 'wfnt', 'golf',\n","                                                   'greenbelt', 'noise_traffic',\n","                                                   'view_rainier', ...]),\n","                                                 ('cat',\n","                                                  OrdinalEncoder(handle_unknown='use_encoded_value',\n","                                                                 unknown_value=-1),\n","                                                  ['sale_date', 'sale_warning',\n","                                                   'join_status', 'city',\n","                                                   'zoning', 'subdivision',\n","                                                   'submarket'])])),\n","                ('regressor',\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])"],"text/html":["<style>#sk-container-id-2 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: #000;\n","  --sklearn-color-text-muted: #666;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-2 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-2 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-2 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-2 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-2 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-2 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-2 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-2 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-2 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-2 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: flex;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","  align-items: start;\n","  justify-content: space-between;\n","  gap: 0.5em;\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label .caption {\n","  font-size: 0.6rem;\n","  font-weight: lighter;\n","  color: var(--sklearn-color-text-muted);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-2 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-2 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-2 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-2 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-2 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-2 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-2 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 0.5em;\n","  text-align: center;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-2 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-2 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                                  [&#x27;id&#x27;, &#x27;sale_nbr&#x27;,\n","                                                   &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                                   &#x27;longitude&#x27;, &#x27;area&#x27;,\n","                                                   &#x27;present_use&#x27;, &#x27;land_val&#x27;,\n","                                                   &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                                   &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;,\n","                                                   &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                                   &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;,\n","                                                   &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;,\n","                                                   &#x27;stories&#x27;, &#x27;beds&#x27;,\n","                                                   &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;,\n","                                                   &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                                   &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;,\n","                                                   &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;,\n","                                                   &#x27;view_rainier&#x27;, ...]),\n","                                                 (&#x27;cat&#x27;,\n","                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                 unknown_value=-1),\n","                                                  [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;,\n","                                                   &#x27;join_status&#x27;, &#x27;city&#x27;,\n","                                                   &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                                   &#x27;submarket&#x27;])])),\n","                (&#x27;regressor&#x27;,\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n","                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                                  [&#x27;id&#x27;, &#x27;sale_nbr&#x27;,\n","                                                   &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                                   &#x27;longitude&#x27;, &#x27;area&#x27;,\n","                                                   &#x27;present_use&#x27;, &#x27;land_val&#x27;,\n","                                                   &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                                   &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;,\n","                                                   &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                                   &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;,\n","                                                   &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;,\n","                                                   &#x27;stories&#x27;, &#x27;beds&#x27;,\n","                                                   &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;,\n","                                                   &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                                   &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;,\n","                                                   &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;,\n","                                                   &#x27;view_rainier&#x27;, ...]),\n","                                                 (&#x27;cat&#x27;,\n","                                                  OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                                 unknown_value=-1),\n","                                                  [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;,\n","                                                   &#x27;join_status&#x27;, &#x27;city&#x27;,\n","                                                   &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                                   &#x27;submarket&#x27;])])),\n","                (&#x27;regressor&#x27;,\n","                 LGBMRegressor(learning_rate=0.05, n_estimators=1000,\n","                               random_state=42, verbosity=-1))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>preprocessor: ColumnTransformer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n","                                 [&#x27;id&#x27;, &#x27;sale_nbr&#x27;, &#x27;join_year&#x27;, &#x27;latitude&#x27;,\n","                                  &#x27;longitude&#x27;, &#x27;area&#x27;, &#x27;present_use&#x27;,\n","                                  &#x27;land_val&#x27;, &#x27;imp_val&#x27;, &#x27;year_built&#x27;,\n","                                  &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;, &#x27;sqft&#x27;, &#x27;sqft_1&#x27;,\n","                                  &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;, &#x27;fbsmt_grade&#x27;,\n","                                  &#x27;condition&#x27;, &#x27;stories&#x27;, &#x27;beds&#x27;, &#x27;bath_full&#x27;,\n","                                  &#x27;bath_3qtr&#x27;, &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;,\n","                                  &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;, &#x27;greenbelt&#x27;,\n","                                  &#x27;noise_traffic&#x27;, &#x27;view_rainier&#x27;, ...]),\n","                                (&#x27;cat&#x27;,\n","                                 OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;,\n","                                                unknown_value=-1),\n","                                 [&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;, &#x27;join_status&#x27;,\n","                                  &#x27;city&#x27;, &#x27;zoning&#x27;, &#x27;subdivision&#x27;,\n","                                  &#x27;submarket&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>num</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;id&#x27;, &#x27;sale_nbr&#x27;, &#x27;join_year&#x27;, &#x27;latitude&#x27;, &#x27;longitude&#x27;, &#x27;area&#x27;, &#x27;present_use&#x27;, &#x27;land_val&#x27;, &#x27;imp_val&#x27;, &#x27;year_built&#x27;, &#x27;year_reno&#x27;, &#x27;sqft_lot&#x27;, &#x27;sqft&#x27;, &#x27;sqft_1&#x27;, &#x27;sqft_fbsmt&#x27;, &#x27;grade&#x27;, &#x27;fbsmt_grade&#x27;, &#x27;condition&#x27;, &#x27;stories&#x27;, &#x27;beds&#x27;, &#x27;bath_full&#x27;, &#x27;bath_3qtr&#x27;, &#x27;bath_half&#x27;, &#x27;garb_sqft&#x27;, &#x27;gara_sqft&#x27;, &#x27;wfnt&#x27;, &#x27;golf&#x27;, &#x27;greenbelt&#x27;, &#x27;noise_traffic&#x27;, &#x27;view_rainier&#x27;, &#x27;view_olympics&#x27;, &#x27;view_cascades&#x27;, &#x27;view_territorial&#x27;, &#x27;view_skyline&#x27;, &#x27;view_sound&#x27;, &#x27;view_lakewash&#x27;, &#x27;view_lakesamm&#x27;, &#x27;view_otherwater&#x27;, &#x27;view_other&#x27;, &#x27;years_since_reno&#x27;, &#x27;total_bathrooms&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>cat</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;sale_date&#x27;, &#x27;sale_warning&#x27;, &#x27;join_status&#x27;, &#x27;city&#x27;, &#x27;zoning&#x27;, &#x27;subdivision&#x27;, &#x27;submarket&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>OrdinalEncoder</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.OrdinalEncoder.html\">?<span>Documentation for OrdinalEncoder</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>OrdinalEncoder(handle_unknown=&#x27;use_encoded_value&#x27;, unknown_value=-1)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LGBMRegressor</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>LGBMRegressor(learning_rate=0.05, n_estimators=1000, random_state=42,\n","              verbosity=-1)</pre></div> </div></div></div></div></div></div>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Assume df_test has same raw features (no sale_price if blind test)\n","X_test = df_test.copy()\n","# If test has sale_price and you want evaluation:\n","has_label = \"sale_price\" in df_test.columns\n","if has_label:\n","    y_test = df_test[\"sale_price\"]"],"metadata":{"id":"Cu_0Pz6lyyGm","executionInfo":{"status":"ok","timestamp":1754372820003,"user_tz":-420,"elapsed":155,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["y_test_log_pred = pipeline_final.predict(X_test)\n","\n","y_test_pred = inverse_log1p(y_test_log_pred)"],"metadata":{"id":"g8_Z1Y021Qms","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754372843489,"user_tz":-420,"elapsed":23483,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"aabc876f-44a7-4958-e42e-2245b7ad5f4d"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LGBMRegressor was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["# Interval: [pred - q, pred + q] clipped at minimum zero\n","lower = np.maximum(y_test_pred - quantile_level, 0)\n","upper = y_test_pred + quantile_level\n"],"metadata":{"id":"1Ur__FQe1QkQ","executionInfo":{"status":"ok","timestamp":1754372843491,"user_tz":-420,"elapsed":36,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["submission = pd.DataFrame({\"id\" : df_test[\"id\"], \"pi_lower\" : lower, \"pi_upper\" : upper})\n","\n","if has_label:\n","    rmse_test = mean_squared_error(y_test, y_test_pred, squared=False)\n","    r2_test = r2_score(y_test, y_test_pred)\n","    print(f\"[Test] RMSE: {rmse_test:.4f}, R2: {r2_test:.4f}\")\n","\n","# Show some predictions with intervals\n","print(submission[[\"id\", \"pi_lower\", \"pi_upper\"]].head())"],"metadata":{"id":"3XsNQ_bV1QaW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754372843493,"user_tz":-420,"elapsed":32,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"d914d7c5-c959-4017-a3ec-f4e258a63fa7"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["       id       pi_lower      pi_upper\n","0  200000  805639.357419  1.070557e+06\n","1  200001  538368.878010  8.032867e+05\n","2  200002  378922.902177  6.438408e+05\n","3  200003  248627.132045  5.135450e+05\n","4  200004  514136.620502  7.790545e+05\n"]}]},{"cell_type":"code","source":["submission.to_csv(\"submission.csv\", index=False)\n","print(\"Submission sample:\")\n","print(submission.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PqnnPUZv2E4W","executionInfo":{"status":"ok","timestamp":1754372844811,"user_tz":-420,"elapsed":1341,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"9792ce16-7b9e-4bfb-ea50-162e93e6dac0"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Submission sample:\n","       id       pi_lower      pi_upper\n","0  200000  805639.357419  1.070557e+06\n","1  200001  538368.878010  8.032867e+05\n","2  200002  378922.902177  6.438408e+05\n","3  200003  248627.132045  5.135450e+05\n","4  200004  514136.620502  7.790545e+05\n"]}]},{"cell_type":"code","source":["data_save = \"/content/drive/MyDrive/PORTO/KAGGLE_COMPETITION/House_Price_Prediction/notebook/Submission\"\n","\n","# kalau mau simpan\n","submission.to_csv(f\"{data_save}/submissionLGB.csv\", index=False)\n","\n","print(\"Submission sample:\")\n","print(submission.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1fks29LZWH6","executionInfo":{"status":"ok","timestamp":1754372847641,"user_tz":-420,"elapsed":2828,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}},"outputId":"b4256c96-05ea-47ea-db06-e37d47bb33e6"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Submission sample:\n","       id       pi_lower      pi_upper\n","0  200000  805639.357419  1.070557e+06\n","1  200001  538368.878010  8.032867e+05\n","2  200002  378922.902177  6.438408e+05\n","3  200003  248627.132045  5.135450e+05\n","4  200004  514136.620502  7.790545e+05\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NkgT085L2Er8","executionInfo":{"status":"ok","timestamp":1754372847648,"user_tz":-420,"elapsed":4,"user":{"displayName":"Rohmatul Ummah","userId":"09062056835023829817"}}},"execution_count":31,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMRQjIkKDK3jiU2SCOExDvt"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}